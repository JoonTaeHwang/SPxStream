/*********************************************************************
*
* (c) Copyright 2012 - 2022, Cambridge Pixel Ltd.
*
* Purpose:
*	Header for SPxRadarSimServer object which encapsulates a
*	server with a Radar Simulator source and associated objects.
*
*
* Revision Control:
*   07/01/22 v1.52   AGC	Fix warning after change to SPxServerBase.
*
* Previous Changes:
*   30/09/21 1.51   AGC	Support radar staring.
*   01/07/21 1.50   AGC	Override base class SaveConfig().
*   12/04/21 1.49   AGC	Support remote restart/shutdown.
*   02/03/21 1.48   AGC	Support weather.
*   07/08/20 1.47   AGC	Remove X11 support by default.
*   07/08/20 1.46   AGC	Improve support without X11.
*   20/11/19 1.45   AGC	Support AIS VDO for platform pos.
*   11/11/19 1.44   AGC	Fix data race during shutdown when testing.
*   04/11/19 1.43   AGC	Support specifying heartbeat address/interface.
*   13/05/19 1.42   AGC	Support per-platform AIS/ADS-B output.
*   09/05/19 1.41   AGC	Changes to support testing.
*   01/05/19 1.40   AGC	Show help using external browser.
*   24/04/19 1.39   AGC	Improve multi-channel support.
*   30/11/18 1.38   AGC	Remove GDI support.
*   16/07/18 1.37   AGC	Support P322 network control.
*   14/06/18 1.36   AGC	Fix possible crash at startup.
*   06/06/18 1.35   AGC	Improve behaviour with app count limit.
*   08/11/17 1.34   AGC	Add GetPimNet/Aux().
*   07/07/17 1.33   AGC	Fix N/C 466 - window size saving.
*   31/01/17 1.32   AGC	Support multiple platforms.
*   07/10/16 1.31   AGC	Add hardware auxiliary source.
*   15/06/16 1.30   AGC	Add beam angle ramp visibility status.
*   08/02/16 1.29   AGC	Support for disabling client connections.
*   11/01/16 1.28   AGC	Noise now generated by SPxSimRadarNoise object.
*			Support Primary+MTI video.
*   01/12/15 1.27   AGC	Use domain for config filenames.
*			Clear destination when radar disabled.
*			Instantiate P172 emulator(s) here.
*   26/11/15 1.26   AGC	Support sector scan visibility status.
*   16/11/15 1.25   AGC	Add GetPimMix().
*   22/10/15 1.24   AGC	Force real-time fading for sector scan.
*   01/10/15 1.23   AGC	Support joystick control of platform.
*   06/08/15 1.22   AGC	Add blind sector visibility test.
*   06/03/15 1.21   AGC	Add legacy parameter migration functions.
*   11/12/14 1.20   AGC	Support Direct2D.
*   18/07/14 1.19   AGC	Add target visibility functions.
*   06/06/14 1.18   AGC	Make enableAux() static.
*   01/05/14 1.17   AGC	Add IsGracePeriodOver() override.
*			Add North-Up functions.
*   04/11/13 1.16   AGC	Derive from SPxServerBase.
*   04/10/13 1.15   AGC	Simplify headers.
*   17/09/13 1.14   AGC	Add various configuration functions.
*   30/07/13 1.13   AGC	Add ROC support.
*			Add building support.
*   19/07/13 1.12   AGC	Improve timing of aux synchronisation.
*   06/06/13 1.11   AGC	Add network receive input.
*			Synchronise simulator source with aux source.
*   03/05/13 1.10   AGC	Track input moved to SPxSimTargetRecv.
*   28/03/13 1.9    AGC	Add GetSlaveParent().
*   18/03/13 1.8    AGC	Improve track input.
*   04/03/13 1.7    AGC	Enhance track input.
*   12/02/13 1.6    AGC	Initial support for SPx track input.
*   25/01/13 1.5    AGC	Preliminary multi-radar support.
*   28/11/12 1.4    AGC	Support project code.
*   09/11/12 1.3    AGC	Add GetScSourceLocal() function.
*   31/10/12 1.2    AGC	Fix build on QNX (without X11).
*   26/10/12 1.1    AGC	Initial version.
**********************************************************************/
#ifndef _SPX_RADAR_SIM_SERVER_H
#define _SPX_RADAR_SIM_SERVER_H

/*
 * Other headers required.
 */

/* For SPX_RADAR_SIM_X11_SUPPORTED. */
#include "SPxLibUtils/SPxCommon.h"

#if SPX_X11_SUPPORTED
/* Set to 1 to enable X11 support. */
#define SPX_RADAR_SIM_X11_SUPPORTED 0
#endif

#if SPX_RADAR_SIM_X11_SUPPORTED
#include <X11/Xlib.h>
#endif

/* For SPxAutoPtr. */
#include "SPxLibUtils/SPxAutoPtr.h"

/* For SPxSimRadarVideoType. */
#include "SPxLibData/SPxSimRadar.h"

/* For SPxRadarSimNavDataPlatformSource. */
#include "SPxLibData/SPxSimPlatform.h"

/* For base class. */
#include "SPxLibNet/SPxServerBase.h"

/* For SPX_SUPPORT_D2D. */
#ifdef _WIN32
#include "SPxLibWin/SPxWinD2DUtils.h"
#endif

/*
 * Types
 */

/* Forward declarations. */
class SPxThread;
class SPxScDest;
class SPxRadarSimulator;
class SPxSimPlatform;
class SPxSimRadar;
class SPxViewControl;
class SPxTestGenerator;
class SPxRadarReplay;
class SPxNetworkReceive;
class SPxHPx100Source;
class SPxPIM;
class SPxWorldMap;
class SPxTerrainDatabase;
class SPxBuildingDatabase;
class SPxWeatherDatabase;
class SPxJoystickSim;
class SPxROC;
class SPxNetworkSend;
class SPxNetworkCtrlP322;
class SPxScSourceLocal;
class SPxScDestDisplay;
#ifdef _WIN32
class SPxScDestBitmapD2D;
#else
#if SPX_RADAR_SIM_X11_SUPPORTED
class SPxScDestDisplayX11;
#endif
#endif
class SPxRadarTrack;
class SPxSimTarget;
class SPxRemoteServer;
struct SPxPacketTrackMinimal_tag;
struct SPxPacketTrackNormal_tag;
struct SPxPacketTrackExtended_tag;
struct SPxTime_tag;
struct SPxReturnHeader_tag;
class SPxRadarSource;
struct SPxSimChannel;
class SPxRunProcess;
struct SPxReturn_tag;
class SPxP172Emulator;
class SPxLUT;
class SPxSimTargetRecvAIS;
struct SPxRadarSimEventParams;

/* Structure to describe full screen state when saving. */
struct SPxRadarSimFullScreenState
{
    int fullscreen;
    int maximised;
    int x;
    int y;
    int width;
    int height;
};

enum SPxRadarSimTgtVis
{
    SPX_RADAR_SIM_TGT_VIS_OK				= 0x0000,
    SPX_RADAR_SIM_TGT_VIS_MOTION_HIDDEN			= 0x0001,
    SPX_RADAR_SIM_TGT_VIS_POD				= 0x0002,
    SPX_RADAR_SIM_TGT_VIS_VIEW				= 0x0004,
    SPX_RADAR_SIM_TGT_VIS_MAX				= 0x0008
};
enum SPxRadarSimTgtVisRadar
{
    SPX_RADAR_SIM_TGT_VIS_RADAR_OK			= 0x00000000,
    SPX_RADAR_SIM_TGT_VIS_RADAR_DISABLED		= 0x00000001,
    SPX_RADAR_SIM_TGT_VIS_RADAR_DISP_DISABLED		= 0x00000002,
    SPX_RADAR_SIM_TGT_VIS_RADAR_START_RANGE		= 0x00000004,
    SPX_RADAR_SIM_TGT_VIS_RADAR_END_RANGE		= 0x00000008,
    SPX_RADAR_SIM_TGT_VIS_RADAR_MIN_BEAM_ANGLE		= 0x00000010,
    SPX_RADAR_SIM_TGT_VIS_RADAR_MAX_BEAM_ANGLE		= 0x00000020,
    SPX_RADAR_SIM_TGT_VIS_RADAR_TERRAIN			= 0x00000040,
    SPX_RADAR_SIM_TGT_VIS_RADAR_BACKGROUND_NOISE	= 0x00000080,
    SPX_RADAR_SIM_TGT_VIS_RADAR_VIS_MAP			= 0x00000100,
    SPX_RADAR_SIM_TGT_VIS_RADAR_PRIMARY_DISABLED	= 0x00000200,
    SPX_RADAR_SIM_TGT_VIS_RADAR_IFF_DISABLED		= 0x00000400,
    SPX_RADAR_SIM_TGT_VIS_RADAR_BLIND_SECTOR		= 0x00000800,
    SPX_RADAR_SIM_TGT_VIS_RADAR_SECTOR_SCAN		= 0x00001000,
    SPX_RADAR_SIM_TGT_VIS_RADAR_MTI			= 0x00002000,
    SPX_RADAR_SIM_TGT_VIS_RADAR_BEAM_ANGLE_RAMP		= 0x00004000,
    SPX_RADAR_SIM_TGT_VIS_RADAR_STARING			= 0x00008000,
    SPX_RADAR_SIM_TGT_VIS_RADAR_MAX			= 0x00010000
};

/*
 * Constants
 */

static const char SPX_RADAR_SIM_CONFIG_DOMAIN[] = "SPxRadarSimulator";

/* Windows messages for shutting down or restarting the server. */
#ifdef _WIN32
#define SPX_RADAR_SIM_WM_SHUTDOWN (WM_APP + 1)
#define SPX_RADAR_SIM_SHUTDOWN (0)
#define SPX_RADAR_SIM_RESTART (1)
#endif

/*
 * Define our class, derived from the standard SPx base class.
 */
class SPxRadarSimServer : public SPxServerBase
{
public:
    /* Public functions. */
    explicit SPxRadarSimServer(UINT32 projectCode, int serverPort,
			       unsigned int numPlatforms,
			       unsigned int numRadars,
			       int controlAvailable=TRUE,
			       int initiallyStandby=FALSE,
			       const char *heartbeatAddr=NULL,
			       const char *heartbeatClientAddr=NULL);
    virtual ~SPxRadarSimServer(void);
    SPxErrorCode CreateEmus(void);

    virtual int IsLicensed(int allowGrace=FALSE) const;
    virtual int IsGracePeriodOver(void) const;
    unsigned int GetNumPlatforms(void) const;
    unsigned int GetNumRadars(void) const;

#ifndef _WIN32
#if SPX_RADAR_SIM_X11_SUPPORTED
    SPxErrorCode SetDest(Display *display, Window followWin);
#endif
#endif

#ifdef _WIN32
    void SetWindow(HWND hwnd);
#endif

    SPxErrorCode SetNorthUp(int northUp);
    int IsNorthUp(void) const;

    SPxErrorCode GetRadarSim(SPxRadarSimulator **radarSim);
    SPxErrorCode GetPlatform(SPxSimPlatform **platform, unsigned int index = 0);
    SPxErrorCode GetRadar(SPxSimRadar **radar, unsigned int index=0);
    SPxErrorCode GetViewControl(SPxViewControl **viewControl);
    SPxErrorCode GetSrcTest(SPxTestGenerator **srcTest, unsigned int index=0);
    SPxErrorCode GetSrcFile(SPxRadarReplay **srcFile, unsigned int index=0);
    SPxErrorCode GetSrcNet(SPxNetworkReceive **srcNet, unsigned int index=0);
    SPxErrorCode GetSrcHw(SPxHPx100Source **srcHw, unsigned int index = 0);
    int IsSrcNetAvailable(void) const;
    SPxErrorCode GetWorldMap(SPxWorldMap **worldMap);
    SPxErrorCode GetTerrainDatabase(SPxTerrainDatabase **tdb);
    SPxErrorCode GetBuildingDatabase(SPxBuildingDatabase **bdb);
    SPxErrorCode GetWeatherDatabase(SPxWeatherDatabase **wdb);
    SPxErrorCode GetJoystick(SPxJoystickSim **joystick);
    SPxErrorCode GetROC(SPxROC **roc, unsigned int index=0);
    SPxErrorCode GetNetworkSend(SPxNetworkSend **netSend,unsigned int index = 0);
    SPxErrorCode GetNetworkSend2(SPxNetworkSend **netSend, unsigned int index = 0);
    SPxErrorCode GetNetworkCtrl(SPxNetworkCtrlP322 **netCtrl, unsigned int index = 0);
    SPxErrorCode GetNetworkSendAux(SPxNetworkSend **netSend, unsigned int index = 0);
    SPxErrorCode GetNetworkSendAux2(SPxNetworkSend **netSend, unsigned int index = 0);
    SPxErrorCode GetNetworkCtrlAux(SPxNetworkCtrlP322 **netCtrl, unsigned int index = 0);
    SPxErrorCode GetPimMix(SPxPIM **pimMix, unsigned int index=0);
    SPxErrorCode GetPimDisp(SPxPIM **pimDisp, unsigned int index=0);
    SPxErrorCode GetPimNet(SPxPIM **pimNet, unsigned int index=0);
    SPxErrorCode GetPimNetAux(SPxPIM **pimNetAux, unsigned int index=0);
    SPxErrorCode GetRibAux(SPxRIB **ribAux, unsigned int index=0);
    SPxErrorCode GetDispLUT(SPxLUT **lut, unsigned int index=0);
    SPxErrorCode GetScSourceLocal(SPxScSourceLocal **scSourceLocal, unsigned int index=0);
#ifdef _WIN32
    SPxErrorCode GetDest(SPxScDestBitmapD2D **dest, unsigned int index=0);
#else
#if SPX_RADAR_SIM_X11_SUPPORTED
    SPxErrorCode GetDest(SPxScDestDisplayX11 **dest, unsigned int index=0);
#endif
#endif
    SPxErrorCode GetDest(SPxScDestDisplay **dest, unsigned int index=0);
    SPxErrorCode GetEmulator(SPxP172Emulator **emu, unsigned int index=0);
    SPxErrorCode GetHelpPort(int *helpPort) const;
    SPxErrorCode GetAISRecv(SPxSimTargetRecvAIS **aisRecv);

    SPxErrorCode SaveConfig(const char *filename,
			    int saveCfg, int saveApp, int saveWinPos,
			    int setFromState = TRUE,
			    const SPxRadarSimFullScreenState *fsState = NULL);
    virtual SPxErrorCode SaveConfig(const char *filename) { return SaveConfig(filename, TRUE, FALSE, FALSE); }
    virtual SPxErrorCode SaveConfig(const char *filename, int setConfigFromState) { return SaveConfig(filename, TRUE, FALSE, FALSE, setConfigFromState); }

    SPxErrorCode MigrateLegacyParams(void);
    SPxErrorCode DeleteLegacyParams(void);

    int IsTargetVisible(SPxSimTarget *target) const;
    UINT32 GetTargetVisibility(SPxSimTarget *target) const;
    UINT32 GetTargetVisibilityToRadar(SPxSimTarget *target, unsigned int index=0) const;

    static void CallbackFn(SPxRunProcess *proc, SPxReturn_tag *rtn, unsigned int azi, unsigned int numAzi);

    virtual int SetParameter(char *parameterName, char *parameterValue);
    virtual int GetParameter(char *parameterName, char *valueBuf, int bufLen);

protected:
    explicit SPxRadarSimServer(UINT32 projectCode, int serverPort,
			       unsigned int numPlatforms,
			       unsigned int numRadars,
			       int controlAvailable,
			       int initiallyStandby,
			       SPxRadarSimulator *radarSim,
			       SPxTerrainDatabase *terrainDB,
			       SPxTestGenerator *testGen,
			       SPxRIB *rib);

    // cppcheck-suppress virtualCallInConstructor
    virtual SPxErrorCode Shutdown(void);
    virtual void Background(void) { SPxRadarSimServer::background(); }

private:
    /* Private variables. */
    struct impl;
    SPxAutoPtr<impl> m_p;

    /* Private functions. */
    void commonConstruct(UINT32 projectCode,
			 unsigned int numPlatforms,
			 unsigned int numRadars,
			 SPxTestGenerator *testGen,
			 SPxRIB *rib);
    virtual void background(void);
    SPxErrorCode eventFn(UINT32 flags, const SPxRadarSimEventParams *params);
    static SPxErrorCode radarChange(SPxSimRadar *radar, UINT32 flags, void *userArg);
    static void enableTestFnWrapper(SPxRadarSource *radarSource, void *userArg);
    void enableTestFn(SPxTestGenerator *srcTest);
    static void enableFileFnWrapper(SPxRadarSource *radarSource, void *userArg);
    void enableFileFn(SPxRadarReplay *srcFile);
    static void enableNetFnWrapper(SPxRadarSource *radarSource, void *userArg);
    void enableNetFn(SPxNetworkReceive *srcNet);
    static void enableHwFnWrapper(SPxRadarSource *radarSource, void *userArg);
    void enableHwFn(SPxHPx100Source *srcNet);
    static void enableAux(SPxSimChannel *chan, int enable);
    UINT32 getTargetVisibilityToRadar(SPxSimTarget *target, unsigned int index) const;
    UINT32 checkTargetChanVisibility(SPxSimRadarVideoType videoType,
				     SPxSimTarget *target, const SPxSimRadar *radar,
				     double bearingRads, double speedMps, double courseDegs) const;
    UINT32 checkTargetChanVisibilityFinal(SPxSimRadarVideoType videoType,
					  SPxSimTarget *target, const SPxSimRadar *radar) const;
    template<unsigned int Len>
    SPxErrorCode migrateLegacyObjectParams(const char *(&params)[Len],
					   const char *oldName,
					   const char *newName,
					   const char *removePrefix=NULL,
					   unsigned int numNewObjects=0);

}; /* SPxRadarSimServer */

#endif /* _SPX_RADAR_SIM_SERVER_H */

/*********************************************************************
*
* End of file
*
**********************************************************************/
