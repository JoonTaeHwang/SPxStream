// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crfs.proto

#ifndef PROTOBUF_crfs_2eproto__INCLUDED
#define PROTOBUF_crfs_2eproto__INCLUDED

#include <string>

// Disable warnings caused by protobuf headers.
#if defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER)
#if (__GNUC__ >= 8)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif
#endif
#ifdef _WIN32
#pragma warning(push)
#pragma warning(disable: 4146 4512 4800)
#if (_MSC_VER >= 1910)
#pragma warning(disable: 5054)
#endif
#endif

#include "google/protobuf/stubs/common.h"

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

#ifdef _WIN32
#pragma warning(pop)
#endif
#if defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER)
#if (__GNUC__ >= 8)
#pragma GCC diagnostic pop
#endif
#endif

namespace protobuf_crfs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::spx_protobuf::protobuf::internal::ParseTableField entries[];
  static const ::spx_protobuf::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::spx_protobuf::protobuf::internal::ParseTable schema[21];
  static const ::spx_protobuf::protobuf::internal::FieldMetadata field_metadata[];
  static const ::spx_protobuf::protobuf::internal::SerializationTable serialization_table[];
  static const ::spx_protobuf::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsThreadIDImpl();
void InitDefaultsThreadID();
void InitDefaultsDataElementImpl();
void InitDefaultsDataElement();
void InitDefaultsDataElementBoolsImpl();
void InitDefaultsDataElementBools();
void InitDefaultsDataElementColorsImpl();
void InitDefaultsDataElementColors();
void InitDefaultsDataElementDoubleArray2DImpl();
void InitDefaultsDataElementDoubleArray2D();
void InitDefaultsDataElementDoublesImpl();
void InitDefaultsDataElementDoubles();
void InitDefaultsDataElementGuidsImpl();
void InitDefaultsDataElementGuids();
void InitDefaultsDataElementIntsImpl();
void InitDefaultsDataElementInts();
void InitDefaultsDataElementStringsImpl();
void InitDefaultsDataElementStrings();
void InitDefaultsDataElementTraceImpl();
void InitDefaultsDataElementTrace();
void InitDefaultsDataElementUIntsImpl();
void InitDefaultsDataElementUInts();
void InitDefaultsDataElementBytesImpl();
void InitDefaultsDataElementBytes();
void InitDefaultsDataStorageImpl();
void InitDefaultsDataStorage();
void InitDefaultsDsDoubleImpl();
void InitDefaultsDsDouble();
void InitDefaultsDsDouble16Impl();
void InitDefaultsDsDouble16();
void InitDefaultsDsDouble32Impl();
void InitDefaultsDsDouble32();
void InitDefaultsDsDouble8Impl();
void InitDefaultsDsDouble8();
void InitDefaultsDsFloatImpl();
void InitDefaultsDsFloat();
inline void InitDefaults() {
  InitDefaultsThreadID();
  InitDefaultsDataElement();
  InitDefaultsDataElementBools();
  InitDefaultsDataElementColors();
  InitDefaultsDataElementDoubleArray2D();
  InitDefaultsDataElementDoubles();
  InitDefaultsDataElementGuids();
  InitDefaultsDataElementInts();
  InitDefaultsDataElementStrings();
  InitDefaultsDataElementTrace();
  InitDefaultsDataElementUInts();
  InitDefaultsDataElementBytes();
  InitDefaultsDataStorage();
  InitDefaultsDsDouble();
  InitDefaultsDsDouble16();
  InitDefaultsDsDouble32();
  InitDefaultsDsDouble8();
  InitDefaultsDsFloat();
}
}  // namespace protobuf_crfs_2eproto
namespace CRFS {
namespace Data {
namespace pbd2 {
class DataElement;
class DataElementDefaultTypeInternal;
extern DataElementDefaultTypeInternal _DataElement_default_instance_;
class DataElementBools;
class DataElementBoolsDefaultTypeInternal;
extern DataElementBoolsDefaultTypeInternal _DataElementBools_default_instance_;
class DataElementBytes;
class DataElementBytesDefaultTypeInternal;
extern DataElementBytesDefaultTypeInternal _DataElementBytes_default_instance_;
class DataElementCollection;
class DataElementCollectionDefaultTypeInternal;
extern DataElementCollectionDefaultTypeInternal _DataElementCollection_default_instance_;
class DataElementColors;
class DataElementColorsDefaultTypeInternal;
extern DataElementColorsDefaultTypeInternal _DataElementColors_default_instance_;
class DataElementDataGenerics;
class DataElementDataGenericsDefaultTypeInternal;
extern DataElementDataGenericsDefaultTypeInternal _DataElementDataGenerics_default_instance_;
class DataElementDoubleArray2D;
class DataElementDoubleArray2DDefaultTypeInternal;
extern DataElementDoubleArray2DDefaultTypeInternal _DataElementDoubleArray2D_default_instance_;
class DataElementDoubles;
class DataElementDoublesDefaultTypeInternal;
extern DataElementDoublesDefaultTypeInternal _DataElementDoubles_default_instance_;
class DataElementGuids;
class DataElementGuidsDefaultTypeInternal;
extern DataElementGuidsDefaultTypeInternal _DataElementGuids_default_instance_;
class DataElementInts;
class DataElementIntsDefaultTypeInternal;
extern DataElementIntsDefaultTypeInternal _DataElementInts_default_instance_;
class DataElementStrings;
class DataElementStringsDefaultTypeInternal;
extern DataElementStringsDefaultTypeInternal _DataElementStrings_default_instance_;
class DataElementTrace;
class DataElementTraceDefaultTypeInternal;
extern DataElementTraceDefaultTypeInternal _DataElementTrace_default_instance_;
class DataElementUInts;
class DataElementUIntsDefaultTypeInternal;
extern DataElementUIntsDefaultTypeInternal _DataElementUInts_default_instance_;
class DataGeneric;
class DataGenericDefaultTypeInternal;
extern DataGenericDefaultTypeInternal _DataGeneric_default_instance_;
class DataStorage;
class DataStorageDefaultTypeInternal;
extern DataStorageDefaultTypeInternal _DataStorage_default_instance_;
class DsDouble;
class DsDoubleDefaultTypeInternal;
extern DsDoubleDefaultTypeInternal _DsDouble_default_instance_;
class DsDouble16;
class DsDouble16DefaultTypeInternal;
extern DsDouble16DefaultTypeInternal _DsDouble16_default_instance_;
class DsDouble32;
class DsDouble32DefaultTypeInternal;
extern DsDouble32DefaultTypeInternal _DsDouble32_default_instance_;
class DsDouble8;
class DsDouble8DefaultTypeInternal;
extern DsDouble8DefaultTypeInternal _DsDouble8_default_instance_;
class DsFloat;
class DsFloatDefaultTypeInternal;
extern DsFloatDefaultTypeInternal _DsFloat_default_instance_;
class ThreadID;
class ThreadIDDefaultTypeInternal;
extern ThreadIDDefaultTypeInternal _ThreadID_default_instance_;
}  // namespace pbd2
}  // namespace Data
}  // namespace CRFS
namespace CRFS {
namespace Data {
namespace pbd2 {

enum ElementTraceType {
  Real = 0,
  IQ = 1,
  MagAngDeg = 2,
  MagAngRad = 3,
  StartStop = 4,
  CenterSpan = 5
};
bool ElementTraceType_IsValid(int value);
const ElementTraceType ElementTraceType_MIN = Real;
const ElementTraceType ElementTraceType_MAX = CenterSpan;
const int ElementTraceType_ARRAYSIZE = ElementTraceType_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* ElementTraceType_descriptor();
inline const ::std::string& ElementTraceType_Name(ElementTraceType value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    ElementTraceType_descriptor(), value);
}
inline bool ElementTraceType_Parse(
    const ::std::string& name, ElementTraceType* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<ElementTraceType>(
    ElementTraceType_descriptor(), name, value);
}
enum NumericDataType {
  undefined = 0,
  Frequency_Hz = 100,
  Time_sec = 101,
  UnixTime_sec = 102,
  Power_dBm = 103,
  Power_W = 104,
  Angle_deg = 105,
  Angle_rad = 106,
  Ratio_dB = 107,
  Percentage = 108,
  Voltage_V = 109,
  Current_A = 110,
  Correlation = 111,
  LatitudeDeg = 112,
  LongitudeDeg = 113,
  Altitude_m = 114,
  Distance_m = 115,
  Speed_mh = 116,
  FieldStrength_dBuVm = 117,
  Voltage_dBuV = 118,
  Bearing_deg = 119,
  Bearing_rad = 120,
  PCMAudio_codes = 121,
  DigitalData_bits = 122,
  HeatMap = 123,
  Pixels_pix = 124,
  Pitch_deg = 125,
  Elevation_deg = 126,
  Roll_deg = 127,
  Elevation_rad = 128,
  Bytes_B = 129,
  Opacity_Percent = 130,
  GUID_string = 131,
  Color_ARGB = 132,
  PropagationLoss_dB_mtr = 133,
  AntennaGain_dBi = 134,
  BitRate_bps = 135,
  AlphaLevel = 136,
  Speed_ms = 137,
  Speed_kph = 138,
  Speed_mph = 139,
  Speed_knots = 140
};
bool NumericDataType_IsValid(int value);
const NumericDataType NumericDataType_MIN = undefined;
const NumericDataType NumericDataType_MAX = Speed_knots;
const int NumericDataType_ARRAYSIZE = NumericDataType_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* NumericDataType_descriptor();
inline const ::std::string& NumericDataType_Name(NumericDataType value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    NumericDataType_descriptor(), value);
}
inline bool NumericDataType_Parse(
    const ::std::string& name, NumericDataType* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<NumericDataType>(
    NumericDataType_descriptor(), name, value);
}
enum StandardKeys {
  Not_Set = 0,
  Network_HostName = 1,
  Network_IPAddress = 2,
  Status_Enabled = 10,
  Status_SourceChanging = 11,
  Status_Alert = 12,
  Status_Error = 13,
  Status_Warning = 14,
  Data_LifetimeSeconds = 19,
  Data_Version = 20,
  Data_Name = 21,
  Data_Color = 22,
  Data_ColorGradient = 23,
  Data_TimeStamp = 24,
  Data_Clear = 25,
  Data_Static = 26,
  Data_Decimation = 27,
  Data_IntegerData = 28,
  Data_Scrolling = 29,
  Data_NominalCenter = 30,
  Data_RepeatNumber = 31,
  Data_SampleTime = 32,
  Data_Trace = 33,
  Data_XData = 34,
  Data_YData = 35,
  Data_ZData = 36,
  Data_XSpan = 37,
  Data_YSpan = 38,
  Data_ZSpan = 39,
  Data_Gate = 40,
  Data_EndOfFile = 41,
  Data_Magnitude = 43,
  Data_Angle = 44,
  Data_Resolution = 45,
  Data_AntennaType = 46,
  Data_Duration = 47,
  Data_Detector = 48,
  Data_ResultCount = 49,
  Data_StandardDeviation = 50,
  Data_IndicatorText = 51,
  Data_IndicatorColor = 52,
  Data_IndicatorShape = 53,
  Data_IndicatorSize = 54,
  Data_IndicatorImageKey = 56,
  Data_Description = 57,
  Data_Indicators = 58,
  Data_VideoBandwidth = 59,
  Record_Destinations = 60,
  Record_TimeStamp = 61,
  Data_IndicatorAlpha = 62,
  Data_ContentIndicator = 63,
  Data_ToolTip = 64,
  Data_IndicatorBorderColor = 65,
  Data_IndicatorDrawPriority = 66,
  Data_IndicatorTooltipColor = 67,
  Data_IndicatorRangeMin = 68,
  Data_IndicatorRangeMax = 69,
  Data_IndicatorLineStyle = 70,
  GsmDemod_ARFCN = 71,
  GsmDemod_TSC = 72,
  GsmDemod_ChannelFrequency = 73,
  Thread_OriginName = 80,
  Thread_OriginGuid = 81,
  Thread_StreamName = 82,
  Thread_StreamGuid = 83,
  Thread_ProviderName = 84,
  Thread_ProviderGuid = 85,
  Thread_EndOfStream = 86,
  Thread_EndOfOrigin = 87,
  Thread_OriginColor = 88,
  Thread_StreamColor = 89,
  Location_Altitude = 90,
  Location_Heading = 91,
  Location_Speed = 92,
  Location_Latitude = 93,
  Location_Longitude = 94,
  Location_GpsFix = 95,
  Location_GpsSatelites = 96,
  Location_GpsStatus = 97,
  Location_GpsTime = 98,
  Location_LatitudeNorth = 99,
  Location_LatitudeSouth = 100,
  Location_LongitudeWest = 101,
  Location_LongitudeEast = 102,
  Location_NorthOffset = 103,
  Location_Pitch = 104,
  Location_Roll = 105,
  AOA_Bearing = 110,
  AOA_BearingDeviation = 111,
  AOA_Heading = 112,
  AOA_SNRdB = 113,
  AOA_VectorRatio = 114,
  AOA_QualityPercent = 115,
  AOA_QualityThreshold = 116,
  AOA_HeadingCorrection = 117,
  AOA_Elevation = 118,
  AOA_ElevationDeviation = 119,
  MaskBreak_Start = 120,
  MaskBreak_Stop = 121,
  MaskBreak_Center = 122,
  MaskBreak_Span = 123,
  MaskBreak_Threshold = 124,
  MaskBreak_Power = 125,
  DataBase_Match = 130,
  DataBase_FileName = 131,
  Occupancy_Min = 132,
  Occupancy_Max = 133,
  GeoLocation_Latitude = 140,
  GeoLocation_Longitude = 141,
  GeoLocation_Confidence = 142,
  Analysis_Center = 145,
  Analysis_Span = 146,
  Squelch_ThresholdExceeded = 150,
  HeatMap_Data = 160,
  HeatMap_WidthPixels = 161,
  HeatMap_HeightPixels = 162,
  HeatMap_WidthMeters = 163,
  HeatMap_HeightMeters = 164,
  HeatMap_AmplitudeScale = 165,
  HeatMap_MinValue = 166,
  HeatMap_MaxValue = 167,
  HeatMap_AverageValue = 168,
  HeatMap_TransparencyValue = 169,
  Power_IntegratedPowerdBm = 170,
  PCM_Conversion_Gain = 180,
  Display_LineThickness = 200,
  Display_VectorStyle = 201,
  NCP_PacketFormat = 300,
  NCP_PacketType = 301,
  NCP_PacketTime = 302,
  NCP_PacketSourceId = 303,
  NCP_PacketId = 304,
  NCP_PacketError = 305,
  NCP_PacketWarning = 306,
  NCP_FieldType = 307,
  NCP_FieldId = 308,
  NCP_FieldError = 309,
  NCP_FieldWarning = 310,
  NCP_FieldAck = 311,
  NCP_ParameterKey = 312,
  NCP_Packet = 314,
  NCP_RawPacket = 315,
  NCP_StatusRecords = 316,
  NCP_FieldNameKey = 317,
  Demodulation_FMDeviationHz = 400,
  Demodulation_FMFrequencyOffsetHz = 401,
  Demodulation_FMCenterFrequencyHz = 402,
  Demodulation_AMModulationIndexPercent = 410,
  Demodulation_AMCarrierFrequencyHz = 411,
  Data_Segment_Number = 412,
  Data_Number_Of_Segments = 413,
  Data_Processing_Loop_Count = 414,
  Data_Spectrum = 415,
  Data_IQTime = 416,
  Data_PCM_Audio = 417,
  Data_WideBandDetector = 418,
  Data_FrequencyChannelOccupancy = 419,
  Data_Pseudo_Trace = 420,
  Data_Noise_Floor = 421,
  Data_Array_Offset = 422,
  Data_AGC_Mode = 448,
  Data_Manual_Attenuation = 449,
  Trigger_Missed_Triggers = 450,
  Trigger_Margin = 451,
  Trigger_Mode = 452,
  System_Exception = 500,
  Bin_ThreadId = 501,
  Bin_DataType = 502
};
bool StandardKeys_IsValid(int value);
const StandardKeys StandardKeys_MIN = Not_Set;
const StandardKeys StandardKeys_MAX = Bin_DataType;
const int StandardKeys_ARRAYSIZE = StandardKeys_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* StandardKeys_descriptor();
inline const ::std::string& StandardKeys_Name(StandardKeys value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    StandardKeys_descriptor(), value);
}
inline bool StandardKeys_Parse(
    const ::std::string& name, StandardKeys* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<StandardKeys>(
    StandardKeys_descriptor(), name, value);
}
enum TextFunction {
  Undefined = 0,
  GeneralText = 1,
  Infomation = 2,
  Warning = 3,
  Error = 4,
  Alert = 5,
  Debug = 6
};
bool TextFunction_IsValid(int value);
const TextFunction TextFunction_MIN = Undefined;
const TextFunction TextFunction_MAX = Debug;
const int TextFunction_ARRAYSIZE = TextFunction_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* TextFunction_descriptor();
inline const ::std::string& TextFunction_Name(TextFunction value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    TextFunction_descriptor(), value);
}
inline bool TextFunction_Parse(
    const ::std::string& name, TextFunction* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<TextFunction>(
    TextFunction_descriptor(), name, value);
}
enum DataVolatility {
  Dynamic = 0,
  Static = 1
};
bool DataVolatility_IsValid(int value);
const DataVolatility DataVolatility_MIN = Dynamic;
const DataVolatility DataVolatility_MAX = Static;
const int DataVolatility_ARRAYSIZE = DataVolatility_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* DataVolatility_descriptor();
inline const ::std::string& DataVolatility_Name(DataVolatility value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    DataVolatility_descriptor(), value);
}
inline bool DataVolatility_Parse(
    const ::std::string& name, DataVolatility* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<DataVolatility>(
    DataVolatility_descriptor(), name, value);
}
enum DataElementType {
  UndefinedType = 0,
  Bools = 1,
  Colors = 2,
  Doubles = 3,
  DoubleArray2D = 4,
  Guids = 5,
  Ints = 6,
  Uints = 7,
  Strings = 8,
  DoubleTrace = 9,
  DataGenerics = 10,
  Bytes = 11
};
bool DataElementType_IsValid(int value);
const DataElementType DataElementType_MIN = UndefinedType;
const DataElementType DataElementType_MAX = Bytes;
const int DataElementType_ARRAYSIZE = DataElementType_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* DataElementType_descriptor();
inline const ::std::string& DataElementType_Name(DataElementType value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    DataElementType_descriptor(), value);
}
inline bool DataElementType_Parse(
    const ::std::string& name, DataElementType* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<DataElementType>(
    DataElementType_descriptor(), name, value);
}
enum DataStorageFormats {
  Default = 0,
  Original = 1,
  ObfuscatedText = 2,
  _8Bit = 3,
  _16Bit = 4,
  _32Bit = 5,
  _64Bit = 6
};
bool DataStorageFormats_IsValid(int value);
const DataStorageFormats DataStorageFormats_MIN = Default;
const DataStorageFormats DataStorageFormats_MAX = _64Bit;
const int DataStorageFormats_ARRAYSIZE = DataStorageFormats_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* DataStorageFormats_descriptor();
inline const ::std::string& DataStorageFormats_Name(DataStorageFormats value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    DataStorageFormats_descriptor(), value);
}
inline bool DataStorageFormats_Parse(
    const ::std::string& name, DataStorageFormats* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<DataStorageFormats>(
    DataStorageFormats_descriptor(), name, value);
}
enum ByteDataContentType {
  blob = 0,
  image_png = 1,
  image_gif = 2,
  image_bmp = 3,
  image_jpg = 4,
  audio_mp3 = 5,
  audio_wav = 6,
  ncp_packet = 7
};
bool ByteDataContentType_IsValid(int value);
const ByteDataContentType ByteDataContentType_MIN = blob;
const ByteDataContentType ByteDataContentType_MAX = ncp_packet;
const int ByteDataContentType_ARRAYSIZE = ByteDataContentType_MAX + 1;

const ::spx_protobuf::protobuf::EnumDescriptor* ByteDataContentType_descriptor();
inline const ::std::string& ByteDataContentType_Name(ByteDataContentType value) {
  return ::spx_protobuf::protobuf::internal::NameOfEnum(
    ByteDataContentType_descriptor(), value);
}
inline bool ByteDataContentType_Parse(
    const ::std::string& name, ByteDataContentType* value) {
  return ::spx_protobuf::protobuf::internal::ParseNamedEnum<ByteDataContentType>(
    ByteDataContentType_descriptor(), name, value);
}
// ===================================================================

class DataGeneric : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataGeneric) */ {
 public:
  DataGeneric();
  virtual ~DataGeneric();

  DataGeneric(const DataGeneric& from);

  inline DataGeneric& operator=(const DataGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataGeneric(DataGeneric&& from) noexcept
    : DataGeneric() {
    *this = ::std::move(from);
  }

  inline DataGeneric& operator=(DataGeneric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataGeneric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataGeneric* internal_default_instance() {
    return reinterpret_cast<const DataGeneric*>(
               &_DataGeneric_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataGeneric* other);
  friend void swap(DataGeneric& a, DataGeneric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataGeneric* New() const PROTOBUF_FINAL { return New(NULL); }

  DataGeneric* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataGeneric& from);
  void MergeFrom(const DataGeneric& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataGeneric* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .CRFS.Data.pbd2.DataElementCollection CustomAttributes = 4;
  bool has_customattributes() const;
  void clear_customattributes();
  static const int kCustomAttributesFieldNumber = 4;
  const ::CRFS::Data::pbd2::DataElementCollection& customattributes() const;
  ::CRFS::Data::pbd2::DataElementCollection* release_customattributes();
  ::CRFS::Data::pbd2::DataElementCollection* mutable_customattributes();
  void set_allocated_customattributes(::CRFS::Data::pbd2::DataElementCollection* customattributes);

  // optional .CRFS.Data.pbd2.DataElementCollection Data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::CRFS::Data::pbd2::DataElementCollection& data() const;
  ::CRFS::Data::pbd2::DataElementCollection* release_data();
  ::CRFS::Data::pbd2::DataElementCollection* mutable_data();
  void set_allocated_data(::CRFS::Data::pbd2::DataElementCollection* data);

  // optional .CRFS.Data.pbd2.ThreadID StreamID = 7;
  bool has_streamid() const;
  void clear_streamid();
  static const int kStreamIDFieldNumber = 7;
  const ::CRFS::Data::pbd2::ThreadID& streamid() const;
  ::CRFS::Data::pbd2::ThreadID* release_streamid();
  ::CRFS::Data::pbd2::ThreadID* mutable_streamid();
  void set_allocated_streamid(::CRFS::Data::pbd2::ThreadID* streamid);

  // optional .CRFS.Data.pbd2.ThreadID OriginID = 8;
  bool has_originid() const;
  void clear_originid();
  static const int kOriginIDFieldNumber = 8;
  const ::CRFS::Data::pbd2::ThreadID& originid() const;
  ::CRFS::Data::pbd2::ThreadID* release_originid();
  ::CRFS::Data::pbd2::ThreadID* mutable_originid();
  void set_allocated_originid(::CRFS::Data::pbd2::ThreadID* originid);

  // optional double UnixTime = 3 [default = 0];
  bool has_unixtime() const;
  void clear_unixtime();
  static const int kUnixTimeFieldNumber = 3;
  double unixtime() const;
  void set_unixtime(double value);

  // optional uint32 DataVersion = 1 [default = 0];
  bool has_dataversion() const;
  void clear_dataversion();
  static const int kDataVersionFieldNumber = 1;
  ::spx_protobuf::protobuf::uint32 dataversion() const;
  void set_dataversion(::spx_protobuf::protobuf::uint32 value);

  // optional uint32 ColorARGB = 6 [default = 0];
  bool has_colorargb() const;
  void clear_colorargb();
  static const int kColorARGBFieldNumber = 6;
  ::spx_protobuf::protobuf::uint32 colorargb() const;
  void set_colorargb(::spx_protobuf::protobuf::uint32 value);

  // optional .CRFS.Data.pbd2.DataVolatility Volatility = 12 [default = Dynamic];
  bool has_volatility() const;
  void clear_volatility();
  static const int kVolatilityFieldNumber = 12;
  ::CRFS::Data::pbd2::DataVolatility volatility() const;
  void set_volatility(::CRFS::Data::pbd2::DataVolatility value);

  // optional bool DataClear = 11 [default = false];
  bool has_dataclear() const;
  void clear_dataclear();
  static const int kDataClearFieldNumber = 11;
  bool dataclear() const;
  void set_dataclear(bool value);

  // optional bool EndOfStream = 13 [default = false];
  bool has_endofstream() const;
  void clear_endofstream();
  static const int kEndOfStreamFieldNumber = 13;
  bool endofstream() const;
  void set_endofstream(bool value);

  // optional bool EndOfOrigin = 14 [default = false];
  bool has_endoforigin() const;
  void clear_endoforigin();
  static const int kEndOfOriginFieldNumber = 14;
  bool endoforigin() const;
  void set_endoforigin(bool value);

  // optional bool EndOfFile = 15 [default = false];
  bool has_endoffile() const;
  void clear_endoffile();
  static const int kEndOfFileFieldNumber = 15;
  bool endoffile() const;
  void set_endoffile(bool value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataGeneric)
 private:
  void set_has_dataversion();
  void clear_has_dataversion();
  void set_has_name();
  void clear_has_name();
  void set_has_unixtime();
  void clear_has_unixtime();
  void set_has_customattributes();
  void clear_has_customattributes();
  void set_has_data();
  void clear_has_data();
  void set_has_colorargb();
  void clear_has_colorargb();
  void set_has_streamid();
  void clear_has_streamid();
  void set_has_originid();
  void clear_has_originid();
  void set_has_dataclear();
  void clear_has_dataclear();
  void set_has_volatility();
  void clear_has_volatility();
  void set_has_endofstream();
  void clear_has_endofstream();
  void set_has_endoforigin();
  void clear_has_endoforigin();
  void set_has_endoffile();
  void clear_has_endoffile();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr name_;
  ::CRFS::Data::pbd2::DataElementCollection* customattributes_;
  ::CRFS::Data::pbd2::DataElementCollection* data_;
  ::CRFS::Data::pbd2::ThreadID* streamid_;
  ::CRFS::Data::pbd2::ThreadID* originid_;
  double unixtime_;
  ::spx_protobuf::protobuf::uint32 dataversion_;
  ::spx_protobuf::protobuf::uint32 colorargb_;
  int volatility_;
  bool dataclear_;
  bool endofstream_;
  bool endoforigin_;
  bool endoffile_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementImpl();
};
// -------------------------------------------------------------------

class DataElementCollection : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementCollection) */ {
 public:
  DataElementCollection();
  virtual ~DataElementCollection();

  DataElementCollection(const DataElementCollection& from);

  inline DataElementCollection& operator=(const DataElementCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementCollection(DataElementCollection&& from) noexcept
    : DataElementCollection() {
    *this = ::std::move(from);
  }

  inline DataElementCollection& operator=(DataElementCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementCollection* internal_default_instance() {
    return reinterpret_cast<const DataElementCollection*>(
               &_DataElementCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DataElementCollection* other);
  friend void swap(DataElementCollection& a, DataElementCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementCollection* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementCollection& from);
  void MergeFrom(const DataElementCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementCollection* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CRFS.Data.pbd2.DataElement Elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  const ::CRFS::Data::pbd2::DataElement& elements(int index) const;
  ::CRFS::Data::pbd2::DataElement* mutable_elements(int index);
  ::CRFS::Data::pbd2::DataElement* add_elements();
  ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataElement >*
      mutable_elements();
  const ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementCollection)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataElement > elements_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementImpl();
};
// -------------------------------------------------------------------

class ThreadID : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.ThreadID) */ {
 public:
  ThreadID();
  virtual ~ThreadID();

  ThreadID(const ThreadID& from);

  inline ThreadID& operator=(const ThreadID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThreadID(ThreadID&& from) noexcept
    : ThreadID() {
    *this = ::std::move(from);
  }

  inline ThreadID& operator=(ThreadID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const ThreadID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadID* internal_default_instance() {
    return reinterpret_cast<const ThreadID*>(
               &_ThreadID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ThreadID* other);
  friend void swap(ThreadID& a, ThreadID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThreadID* New() const PROTOBUF_FINAL { return New(NULL); }

  ThreadID* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThreadID& from);
  void MergeFrom(const ThreadID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThreadID* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GuidString = 2;
  bool has_guidstring() const;
  void clear_guidstring();
  static const int kGuidStringFieldNumber = 2;
  const ::std::string& guidstring() const;
  void set_guidstring(const ::std::string& value);
  #if LANG_CXX11
  void set_guidstring(::std::string&& value);
  #endif
  void set_guidstring(const char* value);
  void set_guidstring(const char* value, size_t size);
  ::std::string* mutable_guidstring();
  ::std::string* release_guidstring();
  void set_allocated_guidstring(::std::string* guidstring);

  // optional string Name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 ColorARGB = 4 [default = 0];
  bool has_colorargb() const;
  void clear_colorargb();
  static const int kColorARGBFieldNumber = 4;
  ::spx_protobuf::protobuf::uint32 colorargb() const;
  void set_colorargb(::spx_protobuf::protobuf::uint32 value);

  // optional uint32 SubStream = 5;
  bool has_substream() const;
  void clear_substream();
  static const int kSubStreamFieldNumber = 5;
  ::spx_protobuf::protobuf::uint32 substream() const;
  void set_substream(::spx_protobuf::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.ThreadID)
 private:
  void set_has_guidstring();
  void clear_has_guidstring();
  void set_has_name();
  void clear_has_name();
  void set_has_colorargb();
  void clear_has_colorargb();
  void set_has_substream();
  void clear_has_substream();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr guidstring_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr name_;
  ::spx_protobuf::protobuf::uint32 colorargb_;
  ::spx_protobuf::protobuf::uint32 substream_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsThreadIDImpl();
};
// -------------------------------------------------------------------

class DataElement : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElement) */ {
 public:
  DataElement();
  virtual ~DataElement();

  DataElement(const DataElement& from);

  inline DataElement& operator=(const DataElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElement(DataElement&& from) noexcept
    : DataElement() {
    *this = ::std::move(from);
  }

  inline DataElement& operator=(DataElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElement* internal_default_instance() {
    return reinterpret_cast<const DataElement*>(
               &_DataElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DataElement* other);
  friend void swap(DataElement& a, DataElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElement* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElement* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElement& from);
  void MergeFrom(const DataElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElement* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .CRFS.Data.pbd2.DataStorage IndexDataStore = 6;
  bool has_indexdatastore() const;
  void clear_indexdatastore();
  static const int kIndexDataStoreFieldNumber = 6;
  const ::CRFS::Data::pbd2::DataStorage& indexdatastore() const;
  ::CRFS::Data::pbd2::DataStorage* release_indexdatastore();
  ::CRFS::Data::pbd2::DataStorage* mutable_indexdatastore();
  void set_allocated_indexdatastore(::CRFS::Data::pbd2::DataStorage* indexdatastore);

  // optional .CRFS.Data.pbd2.DataElementBools BoolData = 20;
  bool has_booldata() const;
  void clear_booldata();
  static const int kBoolDataFieldNumber = 20;
  const ::CRFS::Data::pbd2::DataElementBools& booldata() const;
  ::CRFS::Data::pbd2::DataElementBools* release_booldata();
  ::CRFS::Data::pbd2::DataElementBools* mutable_booldata();
  void set_allocated_booldata(::CRFS::Data::pbd2::DataElementBools* booldata);

  // optional .CRFS.Data.pbd2.DataElementColors ColorData = 22;
  bool has_colordata() const;
  void clear_colordata();
  static const int kColorDataFieldNumber = 22;
  const ::CRFS::Data::pbd2::DataElementColors& colordata() const;
  ::CRFS::Data::pbd2::DataElementColors* release_colordata();
  ::CRFS::Data::pbd2::DataElementColors* mutable_colordata();
  void set_allocated_colordata(::CRFS::Data::pbd2::DataElementColors* colordata);

  // optional .CRFS.Data.pbd2.DataElementDoubles DoubleData = 24;
  bool has_doubledata() const;
  void clear_doubledata();
  static const int kDoubleDataFieldNumber = 24;
  const ::CRFS::Data::pbd2::DataElementDoubles& doubledata() const;
  ::CRFS::Data::pbd2::DataElementDoubles* release_doubledata();
  ::CRFS::Data::pbd2::DataElementDoubles* mutable_doubledata();
  void set_allocated_doubledata(::CRFS::Data::pbd2::DataElementDoubles* doubledata);

  // optional .CRFS.Data.pbd2.DataElementTrace TraceData = 25;
  bool has_tracedata() const;
  void clear_tracedata();
  static const int kTraceDataFieldNumber = 25;
  const ::CRFS::Data::pbd2::DataElementTrace& tracedata() const;
  ::CRFS::Data::pbd2::DataElementTrace* release_tracedata();
  ::CRFS::Data::pbd2::DataElementTrace* mutable_tracedata();
  void set_allocated_tracedata(::CRFS::Data::pbd2::DataElementTrace* tracedata);

  // optional .CRFS.Data.pbd2.DataElementDoubleArray2D Double2dData = 26;
  bool has_double2ddata() const;
  void clear_double2ddata();
  static const int kDouble2DDataFieldNumber = 26;
  const ::CRFS::Data::pbd2::DataElementDoubleArray2D& double2ddata() const;
  ::CRFS::Data::pbd2::DataElementDoubleArray2D* release_double2ddata();
  ::CRFS::Data::pbd2::DataElementDoubleArray2D* mutable_double2ddata();
  void set_allocated_double2ddata(::CRFS::Data::pbd2::DataElementDoubleArray2D* double2ddata);

  // optional .CRFS.Data.pbd2.DataElementInts IntData = 27;
  bool has_intdata() const;
  void clear_intdata();
  static const int kIntDataFieldNumber = 27;
  const ::CRFS::Data::pbd2::DataElementInts& intdata() const;
  ::CRFS::Data::pbd2::DataElementInts* release_intdata();
  ::CRFS::Data::pbd2::DataElementInts* mutable_intdata();
  void set_allocated_intdata(::CRFS::Data::pbd2::DataElementInts* intdata);

  // optional .CRFS.Data.pbd2.DataElementStrings StringData = 28;
  bool has_stringdata() const;
  void clear_stringdata();
  static const int kStringDataFieldNumber = 28;
  const ::CRFS::Data::pbd2::DataElementStrings& stringdata() const;
  ::CRFS::Data::pbd2::DataElementStrings* release_stringdata();
  ::CRFS::Data::pbd2::DataElementStrings* mutable_stringdata();
  void set_allocated_stringdata(::CRFS::Data::pbd2::DataElementStrings* stringdata);

  // optional .CRFS.Data.pbd2.DataElementUInts UIntData = 29;
  bool has_uintdata() const;
  void clear_uintdata();
  static const int kUIntDataFieldNumber = 29;
  const ::CRFS::Data::pbd2::DataElementUInts& uintdata() const;
  ::CRFS::Data::pbd2::DataElementUInts* release_uintdata();
  ::CRFS::Data::pbd2::DataElementUInts* mutable_uintdata();
  void set_allocated_uintdata(::CRFS::Data::pbd2::DataElementUInts* uintdata);

  // optional .CRFS.Data.pbd2.DataElementGuids GuidData = 30;
  bool has_guiddata() const;
  void clear_guiddata();
  static const int kGuidDataFieldNumber = 30;
  const ::CRFS::Data::pbd2::DataElementGuids& guiddata() const;
  ::CRFS::Data::pbd2::DataElementGuids* release_guiddata();
  ::CRFS::Data::pbd2::DataElementGuids* mutable_guiddata();
  void set_allocated_guiddata(::CRFS::Data::pbd2::DataElementGuids* guiddata);

  // optional .CRFS.Data.pbd2.DataElementDataGenerics EmbeddedDataGenericData = 31;
  bool has_embeddeddatagenericdata() const;
  void clear_embeddeddatagenericdata();
  static const int kEmbeddedDataGenericDataFieldNumber = 31;
  const ::CRFS::Data::pbd2::DataElementDataGenerics& embeddeddatagenericdata() const;
  ::CRFS::Data::pbd2::DataElementDataGenerics* release_embeddeddatagenericdata();
  ::CRFS::Data::pbd2::DataElementDataGenerics* mutable_embeddeddatagenericdata();
  void set_allocated_embeddeddatagenericdata(::CRFS::Data::pbd2::DataElementDataGenerics* embeddeddatagenericdata);

  // optional .CRFS.Data.pbd2.DataElementBytes ByteData = 32;
  bool has_bytedata() const;
  void clear_bytedata();
  static const int kByteDataFieldNumber = 32;
  const ::CRFS::Data::pbd2::DataElementBytes& bytedata() const;
  ::CRFS::Data::pbd2::DataElementBytes* release_bytedata();
  ::CRFS::Data::pbd2::DataElementBytes* mutable_bytedata();
  void set_allocated_bytedata(::CRFS::Data::pbd2::DataElementBytes* bytedata);

  // optional .CRFS.Data.pbd2.DataElementCollection ElementAttributes = 33;
  bool has_elementattributes() const;
  void clear_elementattributes();
  static const int kElementAttributesFieldNumber = 33;
  const ::CRFS::Data::pbd2::DataElementCollection& elementattributes() const;
  ::CRFS::Data::pbd2::DataElementCollection* release_elementattributes();
  ::CRFS::Data::pbd2::DataElementCollection* mutable_elementattributes();
  void set_allocated_elementattributes(::CRFS::Data::pbd2::DataElementCollection* elementattributes);

  // optional .CRFS.Data.pbd2.StandardKeys Key = 2 [default = Not_Set];
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::CRFS::Data::pbd2::StandardKeys key() const;
  void set_key(::CRFS::Data::pbd2::StandardKeys value);

  // optional .CRFS.Data.pbd2.NumericDataType IndexUnits = 3 [default = undefined];
  bool has_indexunits() const;
  void clear_indexunits();
  static const int kIndexUnitsFieldNumber = 3;
  ::CRFS::Data::pbd2::NumericDataType indexunits() const;
  void set_indexunits(::CRFS::Data::pbd2::NumericDataType value);

  // optional double IndexStart = 4;
  bool has_indexstart() const;
  void clear_indexstart();
  static const int kIndexStartFieldNumber = 4;
  double indexstart() const;
  void set_indexstart(double value);

  // optional double IndexStop = 5;
  bool has_indexstop() const;
  void clear_indexstop();
  static const int kIndexStopFieldNumber = 5;
  double indexstop() const;
  void set_indexstop(double value);

  // optional .CRFS.Data.pbd2.NumericDataType DataUnits = 7 [default = undefined];
  bool has_dataunits() const;
  void clear_dataunits();
  static const int kDataUnitsFieldNumber = 7;
  ::CRFS::Data::pbd2::NumericDataType dataunits() const;
  void set_dataunits(::CRFS::Data::pbd2::NumericDataType value);

  // optional .CRFS.Data.pbd2.DataElementType ElementType = 9;
  bool has_elementtype() const;
  void clear_elementtype();
  static const int kElementTypeFieldNumber = 9;
  ::CRFS::Data::pbd2::DataElementType elementtype() const;
  void set_elementtype(::CRFS::Data::pbd2::DataElementType value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElement)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_key();
  void clear_has_key();
  void set_has_indexunits();
  void clear_has_indexunits();
  void set_has_indexstart();
  void clear_has_indexstart();
  void set_has_indexstop();
  void clear_has_indexstop();
  void set_has_indexdatastore();
  void clear_has_indexdatastore();
  void set_has_dataunits();
  void clear_has_dataunits();
  void set_has_elementtype();
  void clear_has_elementtype();
  void set_has_booldata();
  void clear_has_booldata();
  void set_has_colordata();
  void clear_has_colordata();
  void set_has_doubledata();
  void clear_has_doubledata();
  void set_has_tracedata();
  void clear_has_tracedata();
  void set_has_double2ddata();
  void clear_has_double2ddata();
  void set_has_intdata();
  void clear_has_intdata();
  void set_has_stringdata();
  void clear_has_stringdata();
  void set_has_uintdata();
  void clear_has_uintdata();
  void set_has_guiddata();
  void clear_has_guiddata();
  void set_has_embeddeddatagenericdata();
  void clear_has_embeddeddatagenericdata();
  void set_has_bytedata();
  void clear_has_bytedata();
  void set_has_elementattributes();
  void clear_has_elementattributes();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr name_;
  ::CRFS::Data::pbd2::DataStorage* indexdatastore_;
  ::CRFS::Data::pbd2::DataElementBools* booldata_;
  ::CRFS::Data::pbd2::DataElementColors* colordata_;
  ::CRFS::Data::pbd2::DataElementDoubles* doubledata_;
  ::CRFS::Data::pbd2::DataElementTrace* tracedata_;
  ::CRFS::Data::pbd2::DataElementDoubleArray2D* double2ddata_;
  ::CRFS::Data::pbd2::DataElementInts* intdata_;
  ::CRFS::Data::pbd2::DataElementStrings* stringdata_;
  ::CRFS::Data::pbd2::DataElementUInts* uintdata_;
  ::CRFS::Data::pbd2::DataElementGuids* guiddata_;
  ::CRFS::Data::pbd2::DataElementDataGenerics* embeddeddatagenericdata_;
  ::CRFS::Data::pbd2::DataElementBytes* bytedata_;
  ::CRFS::Data::pbd2::DataElementCollection* elementattributes_;
  int key_;
  int indexunits_;
  double indexstart_;
  double indexstop_;
  int dataunits_;
  int elementtype_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementImpl();
};
// -------------------------------------------------------------------

class DataElementBools : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementBools) */ {
 public:
  DataElementBools();
  virtual ~DataElementBools();

  DataElementBools(const DataElementBools& from);

  inline DataElementBools& operator=(const DataElementBools& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementBools(DataElementBools&& from) noexcept
    : DataElementBools() {
    *this = ::std::move(from);
  }

  inline DataElementBools& operator=(DataElementBools&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementBools& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementBools* internal_default_instance() {
    return reinterpret_cast<const DataElementBools*>(
               &_DataElementBools_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DataElementBools* other);
  friend void swap(DataElementBools& a, DataElementBools& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementBools* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementBools* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementBools& from);
  void MergeFrom(const DataElementBools& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementBools* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::spx_protobuf::protobuf::RepeatedField< bool >&
      values() const;
  ::spx_protobuf::protobuf::RepeatedField< bool >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementBools)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< bool > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementBoolsImpl();
};
// -------------------------------------------------------------------

class DataElementColors : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementColors) */ {
 public:
  DataElementColors();
  virtual ~DataElementColors();

  DataElementColors(const DataElementColors& from);

  inline DataElementColors& operator=(const DataElementColors& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementColors(DataElementColors&& from) noexcept
    : DataElementColors() {
    *this = ::std::move(from);
  }

  inline DataElementColors& operator=(DataElementColors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementColors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementColors* internal_default_instance() {
    return reinterpret_cast<const DataElementColors*>(
               &_DataElementColors_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DataElementColors* other);
  friend void swap(DataElementColors& a, DataElementColors& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementColors* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementColors* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementColors& from);
  void MergeFrom(const DataElementColors& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementColors* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ColorsARGB = 1;
  int colorsargb_size() const;
  void clear_colorsargb();
  static const int kColorsARGBFieldNumber = 1;
  ::spx_protobuf::protobuf::uint32 colorsargb(int index) const;
  void set_colorsargb(int index, ::spx_protobuf::protobuf::uint32 value);
  void add_colorsargb(::spx_protobuf::protobuf::uint32 value);
  const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >&
      colorsargb() const;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >*
      mutable_colorsargb();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementColors)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 > colorsargb_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementColorsImpl();
};
// -------------------------------------------------------------------

class DataElementDoubleArray2D : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementDoubleArray2D) */ {
 public:
  DataElementDoubleArray2D();
  virtual ~DataElementDoubleArray2D();

  DataElementDoubleArray2D(const DataElementDoubleArray2D& from);

  inline DataElementDoubleArray2D& operator=(const DataElementDoubleArray2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementDoubleArray2D(DataElementDoubleArray2D&& from) noexcept
    : DataElementDoubleArray2D() {
    *this = ::std::move(from);
  }

  inline DataElementDoubleArray2D& operator=(DataElementDoubleArray2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementDoubleArray2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementDoubleArray2D* internal_default_instance() {
    return reinterpret_cast<const DataElementDoubleArray2D*>(
               &_DataElementDoubleArray2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DataElementDoubleArray2D* other);
  friend void swap(DataElementDoubleArray2D& a, DataElementDoubleArray2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementDoubleArray2D* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementDoubleArray2D* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementDoubleArray2D& from);
  void MergeFrom(const DataElementDoubleArray2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementDoubleArray2D* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CRFS.Data.pbd2.DataStorage DataStore = 2;
  bool has_datastore() const;
  void clear_datastore();
  static const int kDataStoreFieldNumber = 2;
  const ::CRFS::Data::pbd2::DataStorage& datastore() const;
  ::CRFS::Data::pbd2::DataStorage* release_datastore();
  ::CRFS::Data::pbd2::DataStorage* mutable_datastore();
  void set_allocated_datastore(::CRFS::Data::pbd2::DataStorage* datastore);

  // optional uint32 Width = 1 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::spx_protobuf::protobuf::uint32 width() const;
  void set_width(::spx_protobuf::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementDoubleArray2D)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_datastore();
  void clear_has_datastore();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CRFS::Data::pbd2::DataStorage* datastore_;
  ::spx_protobuf::protobuf::uint32 width_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementDoubleArray2DImpl();
};
// -------------------------------------------------------------------

class DataElementDoubles : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementDoubles) */ {
 public:
  DataElementDoubles();
  virtual ~DataElementDoubles();

  DataElementDoubles(const DataElementDoubles& from);

  inline DataElementDoubles& operator=(const DataElementDoubles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementDoubles(DataElementDoubles&& from) noexcept
    : DataElementDoubles() {
    *this = ::std::move(from);
  }

  inline DataElementDoubles& operator=(DataElementDoubles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementDoubles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementDoubles* internal_default_instance() {
    return reinterpret_cast<const DataElementDoubles*>(
               &_DataElementDoubles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DataElementDoubles* other);
  friend void swap(DataElementDoubles& a, DataElementDoubles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementDoubles* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementDoubles* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementDoubles& from);
  void MergeFrom(const DataElementDoubles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementDoubles* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::spx_protobuf::protobuf::RepeatedField< double >&
      values() const;
  ::spx_protobuf::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementDoubles)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< double > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementDoublesImpl();
};
// -------------------------------------------------------------------

class DataElementGuids : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementGuids) */ {
 public:
  DataElementGuids();
  virtual ~DataElementGuids();

  DataElementGuids(const DataElementGuids& from);

  inline DataElementGuids& operator=(const DataElementGuids& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementGuids(DataElementGuids&& from) noexcept
    : DataElementGuids() {
    *this = ::std::move(from);
  }

  inline DataElementGuids& operator=(DataElementGuids&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementGuids& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementGuids* internal_default_instance() {
    return reinterpret_cast<const DataElementGuids*>(
               &_DataElementGuids_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DataElementGuids* other);
  friend void swap(DataElementGuids& a, DataElementGuids& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementGuids* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementGuids* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementGuids& from);
  void MergeFrom(const DataElementGuids& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementGuids* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string GuidStrings = 2;
  int guidstrings_size() const;
  void clear_guidstrings();
  static const int kGuidStringsFieldNumber = 2;
  const ::std::string& guidstrings(int index) const;
  ::std::string* mutable_guidstrings(int index);
  void set_guidstrings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_guidstrings(int index, ::std::string&& value);
  #endif
  void set_guidstrings(int index, const char* value);
  void set_guidstrings(int index, const char* value, size_t size);
  ::std::string* add_guidstrings();
  void add_guidstrings(const ::std::string& value);
  #if LANG_CXX11
  void add_guidstrings(::std::string&& value);
  #endif
  void add_guidstrings(const char* value);
  void add_guidstrings(const char* value, size_t size);
  const ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>& guidstrings() const;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>* mutable_guidstrings();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementGuids)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string> guidstrings_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementGuidsImpl();
};
// -------------------------------------------------------------------

class DataElementInts : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementInts) */ {
 public:
  DataElementInts();
  virtual ~DataElementInts();

  DataElementInts(const DataElementInts& from);

  inline DataElementInts& operator=(const DataElementInts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementInts(DataElementInts&& from) noexcept
    : DataElementInts() {
    *this = ::std::move(from);
  }

  inline DataElementInts& operator=(DataElementInts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementInts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementInts* internal_default_instance() {
    return reinterpret_cast<const DataElementInts*>(
               &_DataElementInts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DataElementInts* other);
  friend void swap(DataElementInts& a, DataElementInts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementInts* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementInts* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementInts& from);
  void MergeFrom(const DataElementInts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementInts* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::spx_protobuf::protobuf::int32 values(int index) const;
  void set_values(int index, ::spx_protobuf::protobuf::int32 value);
  void add_values(::spx_protobuf::protobuf::int32 value);
  const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::int32 >&
      values() const;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementInts)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::int32 > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementIntsImpl();
};
// -------------------------------------------------------------------

class DataElementStrings : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementStrings) */ {
 public:
  DataElementStrings();
  virtual ~DataElementStrings();

  DataElementStrings(const DataElementStrings& from);

  inline DataElementStrings& operator=(const DataElementStrings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementStrings(DataElementStrings&& from) noexcept
    : DataElementStrings() {
    *this = ::std::move(from);
  }

  inline DataElementStrings& operator=(DataElementStrings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementStrings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementStrings* internal_default_instance() {
    return reinterpret_cast<const DataElementStrings*>(
               &_DataElementStrings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DataElementStrings* other);
  friend void swap(DataElementStrings& a, DataElementStrings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementStrings* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementStrings* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementStrings& from);
  void MergeFrom(const DataElementStrings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementStrings* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // optional .CRFS.Data.pbd2.TextFunction TextFunction = 2 [default = Undefined];
  bool has_textfunction() const;
  void clear_textfunction();
  static const int kTextFunctionFieldNumber = 2;
  ::CRFS::Data::pbd2::TextFunction textfunction() const;
  void set_textfunction(::CRFS::Data::pbd2::TextFunction value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementStrings)
 private:
  void set_has_textfunction();
  void clear_has_textfunction();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string> values_;
  int textfunction_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementStringsImpl();
};
// -------------------------------------------------------------------

class DataElementTrace : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementTrace) */ {
 public:
  DataElementTrace();
  virtual ~DataElementTrace();

  DataElementTrace(const DataElementTrace& from);

  inline DataElementTrace& operator=(const DataElementTrace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementTrace(DataElementTrace&& from) noexcept
    : DataElementTrace() {
    *this = ::std::move(from);
  }

  inline DataElementTrace& operator=(DataElementTrace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementTrace* internal_default_instance() {
    return reinterpret_cast<const DataElementTrace*>(
               &_DataElementTrace_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DataElementTrace* other);
  friend void swap(DataElementTrace& a, DataElementTrace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementTrace* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementTrace* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementTrace& from);
  void MergeFrom(const DataElementTrace& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementTrace* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CRFS.Data.pbd2.DataStorage YDataStore = 2;
  bool has_ydatastore() const;
  void clear_ydatastore();
  static const int kYDataStoreFieldNumber = 2;
  const ::CRFS::Data::pbd2::DataStorage& ydatastore() const;
  ::CRFS::Data::pbd2::DataStorage* release_ydatastore();
  ::CRFS::Data::pbd2::DataStorage* mutable_ydatastore();
  void set_allocated_ydatastore(::CRFS::Data::pbd2::DataStorage* ydatastore);

  // optional .CRFS.Data.pbd2.DataStorage ZDataStore = 3;
  bool has_zdatastore() const;
  void clear_zdatastore();
  static const int kZDataStoreFieldNumber = 3;
  const ::CRFS::Data::pbd2::DataStorage& zdatastore() const;
  ::CRFS::Data::pbd2::DataStorage* release_zdatastore();
  ::CRFS::Data::pbd2::DataStorage* mutable_zdatastore();
  void set_allocated_zdatastore(::CRFS::Data::pbd2::DataStorage* zdatastore);

  // optional .CRFS.Data.pbd2.NumericDataType ZUnits = 4 [default = undefined];
  bool has_zunits() const;
  void clear_zunits();
  static const int kZUnitsFieldNumber = 4;
  ::CRFS::Data::pbd2::NumericDataType zunits() const;
  void set_zunits(::CRFS::Data::pbd2::NumericDataType value);

  // optional .CRFS.Data.pbd2.ElementTraceType TraceType = 5 [default = Real];
  bool has_tracetype() const;
  void clear_tracetype();
  static const int kTraceTypeFieldNumber = 5;
  ::CRFS::Data::pbd2::ElementTraceType tracetype() const;
  void set_tracetype(::CRFS::Data::pbd2::ElementTraceType value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementTrace)
 private:
  void set_has_ydatastore();
  void clear_has_ydatastore();
  void set_has_zdatastore();
  void clear_has_zdatastore();
  void set_has_zunits();
  void clear_has_zunits();
  void set_has_tracetype();
  void clear_has_tracetype();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CRFS::Data::pbd2::DataStorage* ydatastore_;
  ::CRFS::Data::pbd2::DataStorage* zdatastore_;
  int zunits_;
  int tracetype_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementTraceImpl();
};
// -------------------------------------------------------------------

class DataElementUInts : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementUInts) */ {
 public:
  DataElementUInts();
  virtual ~DataElementUInts();

  DataElementUInts(const DataElementUInts& from);

  inline DataElementUInts& operator=(const DataElementUInts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementUInts(DataElementUInts&& from) noexcept
    : DataElementUInts() {
    *this = ::std::move(from);
  }

  inline DataElementUInts& operator=(DataElementUInts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementUInts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementUInts* internal_default_instance() {
    return reinterpret_cast<const DataElementUInts*>(
               &_DataElementUInts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DataElementUInts* other);
  friend void swap(DataElementUInts& a, DataElementUInts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementUInts* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementUInts* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementUInts& from);
  void MergeFrom(const DataElementUInts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementUInts* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::spx_protobuf::protobuf::uint32 values(int index) const;
  void set_values(int index, ::spx_protobuf::protobuf::uint32 value);
  void add_values(::spx_protobuf::protobuf::uint32 value);
  const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >&
      values() const;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementUInts)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementUIntsImpl();
};
// -------------------------------------------------------------------

class DataElementDataGenerics : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementDataGenerics) */ {
 public:
  DataElementDataGenerics();
  virtual ~DataElementDataGenerics();

  DataElementDataGenerics(const DataElementDataGenerics& from);

  inline DataElementDataGenerics& operator=(const DataElementDataGenerics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementDataGenerics(DataElementDataGenerics&& from) noexcept
    : DataElementDataGenerics() {
    *this = ::std::move(from);
  }

  inline DataElementDataGenerics& operator=(DataElementDataGenerics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementDataGenerics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementDataGenerics* internal_default_instance() {
    return reinterpret_cast<const DataElementDataGenerics*>(
               &_DataElementDataGenerics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DataElementDataGenerics* other);
  friend void swap(DataElementDataGenerics& a, DataElementDataGenerics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementDataGenerics* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementDataGenerics* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementDataGenerics& from);
  void MergeFrom(const DataElementDataGenerics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementDataGenerics* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CRFS.Data.pbd2.DataGeneric Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::CRFS::Data::pbd2::DataGeneric& values(int index) const;
  ::CRFS::Data::pbd2::DataGeneric* mutable_values(int index);
  ::CRFS::Data::pbd2::DataGeneric* add_values();
  ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataGeneric >*
      mutable_values();
  const ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataGeneric >&
      values() const;

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementDataGenerics)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataGeneric > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementImpl();
};
// -------------------------------------------------------------------

class DataElementBytes : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataElementBytes) */ {
 public:
  DataElementBytes();
  virtual ~DataElementBytes();

  DataElementBytes(const DataElementBytes& from);

  inline DataElementBytes& operator=(const DataElementBytes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementBytes(DataElementBytes&& from) noexcept
    : DataElementBytes() {
    *this = ::std::move(from);
  }

  inline DataElementBytes& operator=(DataElementBytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataElementBytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementBytes* internal_default_instance() {
    return reinterpret_cast<const DataElementBytes*>(
               &_DataElementBytes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DataElementBytes* other);
  friend void swap(DataElementBytes& a, DataElementBytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementBytes* New() const PROTOBUF_FINAL { return New(NULL); }

  DataElementBytes* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataElementBytes& from);
  void MergeFrom(const DataElementBytes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataElementBytes* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional bytes Values = 3;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  #if LANG_CXX11
  void set_values(::std::string&& value);
  #endif
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);

  // optional .CRFS.Data.pbd2.ByteDataContentType ContentType = 1 [default = blob];
  bool has_contenttype() const;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 1;
  ::CRFS::Data::pbd2::ByteDataContentType contenttype() const;
  void set_contenttype(::CRFS::Data::pbd2::ByteDataContentType value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataElementBytes)
 private:
  void set_has_contenttype();
  void clear_has_contenttype();
  void set_has_description();
  void clear_has_description();
  void set_has_values();
  void clear_has_values();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr description_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr values_;
  int contenttype_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataElementBytesImpl();
};
// -------------------------------------------------------------------

class DataStorage : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DataStorage) */ {
 public:
  DataStorage();
  virtual ~DataStorage();

  DataStorage(const DataStorage& from);

  inline DataStorage& operator=(const DataStorage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataStorage(DataStorage&& from) noexcept
    : DataStorage() {
    *this = ::std::move(from);
  }

  inline DataStorage& operator=(DataStorage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DataStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataStorage* internal_default_instance() {
    return reinterpret_cast<const DataStorage*>(
               &_DataStorage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DataStorage* other);
  friend void swap(DataStorage& a, DataStorage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataStorage* New() const PROTOBUF_FINAL { return New(NULL); }

  DataStorage* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataStorage& from);
  void MergeFrom(const DataStorage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataStorage* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CRFS.Data.pbd2.DsDouble DsDouble = 43;
  bool has_dsdouble() const;
  void clear_dsdouble();
  static const int kDsDoubleFieldNumber = 43;
  const ::CRFS::Data::pbd2::DsDouble& dsdouble() const;
  ::CRFS::Data::pbd2::DsDouble* release_dsdouble();
  ::CRFS::Data::pbd2::DsDouble* mutable_dsdouble();
  void set_allocated_dsdouble(::CRFS::Data::pbd2::DsDouble* dsdouble);

  // optional .CRFS.Data.pbd2.DsDouble8 DsDouble8 = 44;
  bool has_dsdouble8() const;
  void clear_dsdouble8();
  static const int kDsDouble8FieldNumber = 44;
  const ::CRFS::Data::pbd2::DsDouble8& dsdouble8() const;
  ::CRFS::Data::pbd2::DsDouble8* release_dsdouble8();
  ::CRFS::Data::pbd2::DsDouble8* mutable_dsdouble8();
  void set_allocated_dsdouble8(::CRFS::Data::pbd2::DsDouble8* dsdouble8);

  // optional .CRFS.Data.pbd2.DsDouble16 DsDouble16 = 45;
  bool has_dsdouble16() const;
  void clear_dsdouble16();
  static const int kDsDouble16FieldNumber = 45;
  const ::CRFS::Data::pbd2::DsDouble16& dsdouble16() const;
  ::CRFS::Data::pbd2::DsDouble16* release_dsdouble16();
  ::CRFS::Data::pbd2::DsDouble16* mutable_dsdouble16();
  void set_allocated_dsdouble16(::CRFS::Data::pbd2::DsDouble16* dsdouble16);

  // optional .CRFS.Data.pbd2.DsDouble32 DsDouble32 = 46;
  bool has_dsdouble32() const;
  void clear_dsdouble32();
  static const int kDsDouble32FieldNumber = 46;
  const ::CRFS::Data::pbd2::DsDouble32& dsdouble32() const;
  ::CRFS::Data::pbd2::DsDouble32* release_dsdouble32();
  ::CRFS::Data::pbd2::DsDouble32* mutable_dsdouble32();
  void set_allocated_dsdouble32(::CRFS::Data::pbd2::DsDouble32* dsdouble32);

  // optional .CRFS.Data.pbd2.DsFloat DsFloat = 47;
  bool has_dsfloat() const;
  void clear_dsfloat();
  static const int kDsFloatFieldNumber = 47;
  const ::CRFS::Data::pbd2::DsFloat& dsfloat() const;
  ::CRFS::Data::pbd2::DsFloat* release_dsfloat();
  ::CRFS::Data::pbd2::DsFloat* mutable_dsfloat();
  void set_allocated_dsfloat(::CRFS::Data::pbd2::DsFloat* dsfloat);

  // optional .CRFS.Data.pbd2.DataStorageFormats StorageFormat = 39;
  bool has_storageformat() const;
  void clear_storageformat();
  static const int kStorageFormatFieldNumber = 39;
  ::CRFS::Data::pbd2::DataStorageFormats storageformat() const;
  void set_storageformat(::CRFS::Data::pbd2::DataStorageFormats value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DataStorage)
 private:
  void set_has_storageformat();
  void clear_has_storageformat();
  void set_has_dsdouble();
  void clear_has_dsdouble();
  void set_has_dsdouble8();
  void clear_has_dsdouble8();
  void set_has_dsdouble16();
  void clear_has_dsdouble16();
  void set_has_dsdouble32();
  void clear_has_dsdouble32();
  void set_has_dsfloat();
  void clear_has_dsfloat();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::CRFS::Data::pbd2::DsDouble* dsdouble_;
  ::CRFS::Data::pbd2::DsDouble8* dsdouble8_;
  ::CRFS::Data::pbd2::DsDouble16* dsdouble16_;
  ::CRFS::Data::pbd2::DsDouble32* dsdouble32_;
  ::CRFS::Data::pbd2::DsFloat* dsfloat_;
  int storageformat_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDataStorageImpl();
};
// -------------------------------------------------------------------

class DsDouble : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DsDouble) */ {
 public:
  DsDouble();
  virtual ~DsDouble();

  DsDouble(const DsDouble& from);

  inline DsDouble& operator=(const DsDouble& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDouble(DsDouble&& from) noexcept
    : DsDouble() {
    *this = ::std::move(from);
  }

  inline DsDouble& operator=(DsDouble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DsDouble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DsDouble* internal_default_instance() {
    return reinterpret_cast<const DsDouble*>(
               &_DsDouble_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DsDouble* other);
  friend void swap(DsDouble& a, DsDouble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDouble* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDouble* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDouble& from);
  void MergeFrom(const DsDouble& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDouble* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double Data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::spx_protobuf::protobuf::RepeatedField< double >&
      data() const;
  ::spx_protobuf::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DsDouble)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< double > data_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDsDoubleImpl();
};
// -------------------------------------------------------------------

class DsDouble16 : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DsDouble16) */ {
 public:
  DsDouble16();
  virtual ~DsDouble16();

  DsDouble16(const DsDouble16& from);

  inline DsDouble16& operator=(const DsDouble16& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDouble16(DsDouble16&& from) noexcept
    : DsDouble16() {
    *this = ::std::move(from);
  }

  inline DsDouble16& operator=(DsDouble16&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DsDouble16& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DsDouble16* internal_default_instance() {
    return reinterpret_cast<const DsDouble16*>(
               &_DsDouble16_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DsDouble16* other);
  friend void swap(DsDouble16& a, DsDouble16& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDouble16* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDouble16* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDouble16& from);
  void MergeFrom(const DsDouble16& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDouble16* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Bytes = 1;
  bool has_bytes() const;
  void clear_bytes();
  static const int kBytesFieldNumber = 1;
  const ::std::string& bytes() const;
  void set_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes(::std::string&& value);
  #endif
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  ::std::string* mutable_bytes();
  ::std::string* release_bytes();
  void set_allocated_bytes(::std::string* bytes);

  // optional double Max = 2 [default = 0];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // optional double Min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  double cp_min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DsDouble16)
 private:
  void set_has_bytes();
  void clear_has_bytes();
  void set_has_max();
  void clear_has_max();
  void set_has_min();
  void clear_has_min();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr bytes_;
  double max_;
  double min_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDsDouble16Impl();
};
// -------------------------------------------------------------------

class DsDouble32 : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DsDouble32) */ {
 public:
  DsDouble32();
  virtual ~DsDouble32();

  DsDouble32(const DsDouble32& from);

  inline DsDouble32& operator=(const DsDouble32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDouble32(DsDouble32&& from) noexcept
    : DsDouble32() {
    *this = ::std::move(from);
  }

  inline DsDouble32& operator=(DsDouble32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DsDouble32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DsDouble32* internal_default_instance() {
    return reinterpret_cast<const DsDouble32*>(
               &_DsDouble32_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DsDouble32* other);
  friend void swap(DsDouble32& a, DsDouble32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDouble32* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDouble32* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDouble32& from);
  void MergeFrom(const DsDouble32& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDouble32* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Bytes = 1;
  bool has_bytes() const;
  void clear_bytes();
  static const int kBytesFieldNumber = 1;
  const ::std::string& bytes() const;
  void set_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes(::std::string&& value);
  #endif
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  ::std::string* mutable_bytes();
  ::std::string* release_bytes();
  void set_allocated_bytes(::std::string* bytes);

  // optional double Max = 2 [default = 0];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // optional double Min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  double cp_min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DsDouble32)
 private:
  void set_has_bytes();
  void clear_has_bytes();
  void set_has_max();
  void clear_has_max();
  void set_has_min();
  void clear_has_min();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr bytes_;
  double max_;
  double min_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDsDouble32Impl();
};
// -------------------------------------------------------------------

class DsDouble8 : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DsDouble8) */ {
 public:
  DsDouble8();
  virtual ~DsDouble8();

  DsDouble8(const DsDouble8& from);

  inline DsDouble8& operator=(const DsDouble8& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsDouble8(DsDouble8&& from) noexcept
    : DsDouble8() {
    *this = ::std::move(from);
  }

  inline DsDouble8& operator=(DsDouble8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DsDouble8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DsDouble8* internal_default_instance() {
    return reinterpret_cast<const DsDouble8*>(
               &_DsDouble8_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DsDouble8* other);
  friend void swap(DsDouble8& a, DsDouble8& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsDouble8* New() const PROTOBUF_FINAL { return New(NULL); }

  DsDouble8* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsDouble8& from);
  void MergeFrom(const DsDouble8& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsDouble8* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Bytes = 1;
  bool has_bytes() const;
  void clear_bytes();
  static const int kBytesFieldNumber = 1;
  const ::std::string& bytes() const;
  void set_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_bytes(::std::string&& value);
  #endif
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  ::std::string* mutable_bytes();
  ::std::string* release_bytes();
  void set_allocated_bytes(::std::string* bytes);

  // optional double Max = 2 [default = 0];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // optional double Min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  double cp_min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DsDouble8)
 private:
  void set_has_bytes();
  void clear_has_bytes();
  void set_has_max();
  void clear_has_max();
  void set_has_min();
  void clear_has_min();

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::internal::ArenaStringPtr bytes_;
  double max_;
  double min_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDsDouble8Impl();
};
// -------------------------------------------------------------------

class DsFloat : public ::spx_protobuf::protobuf::Message /* @@protoc_insertion_point(class_definition:CRFS.Data.pbd2.DsFloat) */ {
 public:
  DsFloat();
  virtual ~DsFloat();

  DsFloat(const DsFloat& from);

  inline DsFloat& operator=(const DsFloat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DsFloat(DsFloat&& from) noexcept
    : DsFloat() {
    *this = ::std::move(from);
  }

  inline DsFloat& operator=(DsFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::spx_protobuf::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::spx_protobuf::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::spx_protobuf::protobuf::Descriptor* descriptor();
  static const DsFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DsFloat* internal_default_instance() {
    return reinterpret_cast<const DsFloat*>(
               &_DsFloat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DsFloat* other);
  friend void swap(DsFloat& a, DsFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DsFloat* New() const PROTOBUF_FINAL { return New(NULL); }

  DsFloat* New(::spx_protobuf::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::spx_protobuf::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DsFloat& from);
  void MergeFrom(const DsFloat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::spx_protobuf::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::spx_protobuf::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::spx_protobuf::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::spx_protobuf::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DsFloat* other);
  private:
  inline ::spx_protobuf::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::spx_protobuf::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float Values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::spx_protobuf::protobuf::RepeatedField< float >&
      values() const;
  ::spx_protobuf::protobuf::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:CRFS.Data.pbd2.DsFloat)
 private:

  ::spx_protobuf::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::spx_protobuf::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::spx_protobuf::protobuf::RepeatedField< float > values_;
  friend struct ::protobuf_crfs_2eproto::TableStruct;
  friend void ::protobuf_crfs_2eproto::InitDefaultsDsFloatImpl();
};
// ===================================================================


// ===================================================================

#if defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

// DataGeneric

// optional uint32 DataVersion = 1 [default = 0];
inline bool DataGeneric::has_dataversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataGeneric::set_has_dataversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataGeneric::clear_has_dataversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataGeneric::clear_dataversion() {
  dataversion_ = 0u;
  clear_has_dataversion();
}
inline ::spx_protobuf::protobuf::uint32 DataGeneric::dataversion() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.DataVersion)
  return dataversion_;
}
inline void DataGeneric::set_dataversion(::spx_protobuf::protobuf::uint32 value) {
  set_has_dataversion();
  dataversion_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.DataVersion)
}

// optional string Name = 2;
inline bool DataGeneric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataGeneric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataGeneric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataGeneric::clear_name() {
  name_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataGeneric::name() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.Name)
  return name_.GetNoArena();
}
inline void DataGeneric::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.Name)
}
#if LANG_CXX11
inline void DataGeneric::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DataGeneric.Name)
}
#endif
inline void DataGeneric::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataGeneric.Name)
}
inline void DataGeneric::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataGeneric.Name)
}
inline ::std::string* DataGeneric::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataGeneric.Name)
  return name_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataGeneric::release_name() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataGeneric.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataGeneric::set_allocated_name(::std::string* namei) {
  if (namei != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), namei);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataGeneric.Name)
}

// optional double UnixTime = 3 [default = 0];
inline bool DataGeneric::has_unixtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataGeneric::set_has_unixtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataGeneric::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataGeneric::clear_unixtime() {
  unixtime_ = 0;
  clear_has_unixtime();
}
inline double DataGeneric::unixtime() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.UnixTime)
  return unixtime_;
}
inline void DataGeneric::set_unixtime(double value) {
  set_has_unixtime();
  unixtime_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.UnixTime)
}

// optional .CRFS.Data.pbd2.DataElementCollection CustomAttributes = 4;
inline bool DataGeneric::has_customattributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataGeneric::set_has_customattributes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataGeneric::clear_has_customattributes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataGeneric::clear_customattributes() {
  if (customattributes_ != NULL) customattributes_->Clear();
  clear_has_customattributes();
}
inline const ::CRFS::Data::pbd2::DataElementCollection& DataGeneric::customattributes() const {
  const ::CRFS::Data::pbd2::DataElementCollection* p = customattributes_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.CustomAttributes)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementCollection*>(
      &::CRFS::Data::pbd2::_DataElementCollection_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataGeneric::release_customattributes() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataGeneric.CustomAttributes)
  clear_has_customattributes();
  ::CRFS::Data::pbd2::DataElementCollection* temp = customattributes_;
  customattributes_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataGeneric::mutable_customattributes() {
  set_has_customattributes();
  if (customattributes_ == NULL) {
    customattributes_ = new ::CRFS::Data::pbd2::DataElementCollection;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataGeneric.CustomAttributes)
  return customattributes_;
}
inline void DataGeneric::set_allocated_customattributes(::CRFS::Data::pbd2::DataElementCollection* customattributesi) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customattributes_;
  }
  if (customattributesi) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customattributesi = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, customattributesi, submessage_arena);
    }
    set_has_customattributes();
  } else {
    clear_has_customattributes();
  }
  customattributes_ = customattributesi;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataGeneric.CustomAttributes)
}

// optional .CRFS.Data.pbd2.DataElementCollection Data = 5;
inline bool DataGeneric::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataGeneric::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataGeneric::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataGeneric::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::CRFS::Data::pbd2::DataElementCollection& DataGeneric::data() const {
  const ::CRFS::Data::pbd2::DataElementCollection* p = data_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.Data)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementCollection*>(
      &::CRFS::Data::pbd2::_DataElementCollection_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataGeneric::release_data() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataGeneric.Data)
  clear_has_data();
  ::CRFS::Data::pbd2::DataElementCollection* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataGeneric::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::CRFS::Data::pbd2::DataElementCollection;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataGeneric.Data)
  return data_;
}
inline void DataGeneric::set_allocated_data(::CRFS::Data::pbd2::DataElementCollection* datai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (datai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      datai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, datai, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = datai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataGeneric.Data)
}

// optional uint32 ColorARGB = 6 [default = 0];
inline bool DataGeneric::has_colorargb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataGeneric::set_has_colorargb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataGeneric::clear_has_colorargb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataGeneric::clear_colorargb() {
  colorargb_ = 0u;
  clear_has_colorargb();
}
inline ::spx_protobuf::protobuf::uint32 DataGeneric::colorargb() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.ColorARGB)
  return colorargb_;
}
inline void DataGeneric::set_colorargb(::spx_protobuf::protobuf::uint32 value) {
  set_has_colorargb();
  colorargb_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.ColorARGB)
}

// optional .CRFS.Data.pbd2.ThreadID StreamID = 7;
inline bool DataGeneric::has_streamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataGeneric::set_has_streamid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataGeneric::clear_has_streamid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataGeneric::clear_streamid() {
  if (streamid_ != NULL) streamid_->Clear();
  clear_has_streamid();
}
inline const ::CRFS::Data::pbd2::ThreadID& DataGeneric::streamid() const {
  const ::CRFS::Data::pbd2::ThreadID* p = streamid_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.StreamID)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::ThreadID*>(
      &::CRFS::Data::pbd2::_ThreadID_default_instance_);
}
inline ::CRFS::Data::pbd2::ThreadID* DataGeneric::release_streamid() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataGeneric.StreamID)
  clear_has_streamid();
  ::CRFS::Data::pbd2::ThreadID* temp = streamid_;
  streamid_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::ThreadID* DataGeneric::mutable_streamid() {
  set_has_streamid();
  if (streamid_ == NULL) {
    streamid_ = new ::CRFS::Data::pbd2::ThreadID;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataGeneric.StreamID)
  return streamid_;
}
inline void DataGeneric::set_allocated_streamid(::CRFS::Data::pbd2::ThreadID* streamidi) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete streamid_;
  }
  if (streamidi) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      streamidi = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, streamidi, submessage_arena);
    }
    set_has_streamid();
  } else {
    clear_has_streamid();
  }
  streamid_ = streamidi;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataGeneric.StreamID)
}

// optional .CRFS.Data.pbd2.ThreadID OriginID = 8;
inline bool DataGeneric::has_originid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataGeneric::set_has_originid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataGeneric::clear_has_originid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataGeneric::clear_originid() {
  if (originid_ != NULL) originid_->Clear();
  clear_has_originid();
}
inline const ::CRFS::Data::pbd2::ThreadID& DataGeneric::originid() const {
  const ::CRFS::Data::pbd2::ThreadID* p = originid_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.OriginID)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::ThreadID*>(
      &::CRFS::Data::pbd2::_ThreadID_default_instance_);
}
inline ::CRFS::Data::pbd2::ThreadID* DataGeneric::release_originid() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataGeneric.OriginID)
  clear_has_originid();
  ::CRFS::Data::pbd2::ThreadID* temp = originid_;
  originid_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::ThreadID* DataGeneric::mutable_originid() {
  set_has_originid();
  if (originid_ == NULL) {
    originid_ = new ::CRFS::Data::pbd2::ThreadID;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataGeneric.OriginID)
  return originid_;
}
inline void DataGeneric::set_allocated_originid(::CRFS::Data::pbd2::ThreadID* originidi) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete originid_;
  }
  if (originidi) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      originidi = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, originidi, submessage_arena);
    }
    set_has_originid();
  } else {
    clear_has_originid();
  }
  originid_ = originidi;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataGeneric.OriginID)
}

// optional bool DataClear = 11 [default = false];
inline bool DataGeneric::has_dataclear() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataGeneric::set_has_dataclear() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataGeneric::clear_has_dataclear() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataGeneric::clear_dataclear() {
  dataclear_ = false;
  clear_has_dataclear();
}
inline bool DataGeneric::dataclear() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.DataClear)
  return dataclear_;
}
inline void DataGeneric::set_dataclear(bool value) {
  set_has_dataclear();
  dataclear_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.DataClear)
}

// optional .CRFS.Data.pbd2.DataVolatility Volatility = 12 [default = Dynamic];
inline bool DataGeneric::has_volatility() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataGeneric::set_has_volatility() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataGeneric::clear_has_volatility() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataGeneric::clear_volatility() {
  volatility_ = 0;
  clear_has_volatility();
}
inline ::CRFS::Data::pbd2::DataVolatility DataGeneric::volatility() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.Volatility)
  return static_cast< ::CRFS::Data::pbd2::DataVolatility >(volatility_);
}
inline void DataGeneric::set_volatility(::CRFS::Data::pbd2::DataVolatility value) {
  assert(::CRFS::Data::pbd2::DataVolatility_IsValid(value));
  set_has_volatility();
  volatility_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.Volatility)
}

// optional bool EndOfStream = 13 [default = false];
inline bool DataGeneric::has_endofstream() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataGeneric::set_has_endofstream() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataGeneric::clear_has_endofstream() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataGeneric::clear_endofstream() {
  endofstream_ = false;
  clear_has_endofstream();
}
inline bool DataGeneric::endofstream() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.EndOfStream)
  return endofstream_;
}
inline void DataGeneric::set_endofstream(bool value) {
  set_has_endofstream();
  endofstream_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.EndOfStream)
}

// optional bool EndOfOrigin = 14 [default = false];
inline bool DataGeneric::has_endoforigin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataGeneric::set_has_endoforigin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataGeneric::clear_has_endoforigin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataGeneric::clear_endoforigin() {
  endoforigin_ = false;
  clear_has_endoforigin();
}
inline bool DataGeneric::endoforigin() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.EndOfOrigin)
  return endoforigin_;
}
inline void DataGeneric::set_endoforigin(bool value) {
  set_has_endoforigin();
  endoforigin_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.EndOfOrigin)
}

// optional bool EndOfFile = 15 [default = false];
inline bool DataGeneric::has_endoffile() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataGeneric::set_has_endoffile() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataGeneric::clear_has_endoffile() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataGeneric::clear_endoffile() {
  endoffile_ = false;
  clear_has_endoffile();
}
inline bool DataGeneric::endoffile() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataGeneric.EndOfFile)
  return endoffile_;
}
inline void DataGeneric::set_endoffile(bool value) {
  set_has_endoffile();
  endoffile_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataGeneric.EndOfFile)
}

// -------------------------------------------------------------------

// DataElementCollection

// repeated .CRFS.Data.pbd2.DataElement Elements = 1;
inline int DataElementCollection::elements_size() const {
  return elements_.size();
}
inline void DataElementCollection::clear_elements() {
  elements_.Clear();
}
inline const ::CRFS::Data::pbd2::DataElement& DataElementCollection::elements(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementCollection.Elements)
  return elements_.Get(index);
}
inline ::CRFS::Data::pbd2::DataElement* DataElementCollection::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementCollection.Elements)
  return elements_.Mutable(index);
}
inline ::CRFS::Data::pbd2::DataElement* DataElementCollection::add_elements() {
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementCollection.Elements)
  return elements_.Add();
}
inline ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataElement >*
DataElementCollection::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementCollection.Elements)
  return &elements_;
}
inline const ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataElement >&
DataElementCollection::elements() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementCollection.Elements)
  return elements_;
}

// -------------------------------------------------------------------

// ThreadID

// optional string GuidString = 2;
inline bool ThreadID::has_guidstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThreadID::set_has_guidstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThreadID::clear_has_guidstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThreadID::clear_guidstring() {
  guidstring_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guidstring();
}
inline const ::std::string& ThreadID::guidstring() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.ThreadID.GuidString)
  return guidstring_.GetNoArena();
}
inline void ThreadID::set_guidstring(const ::std::string& value) {
  set_has_guidstring();
  guidstring_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.ThreadID.GuidString)
}
#if LANG_CXX11
inline void ThreadID::set_guidstring(::std::string&& value) {
  set_has_guidstring();
  guidstring_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.ThreadID.GuidString)
}
#endif
inline void ThreadID::set_guidstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guidstring();
  guidstring_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.ThreadID.GuidString)
}
inline void ThreadID::set_guidstring(const char* value, size_t size) {
  set_has_guidstring();
  guidstring_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.ThreadID.GuidString)
}
inline ::std::string* ThreadID::mutable_guidstring() {
  set_has_guidstring();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.ThreadID.GuidString)
  return guidstring_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThreadID::release_guidstring() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.ThreadID.GuidString)
  clear_has_guidstring();
  return guidstring_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThreadID::set_allocated_guidstring(::std::string* guidstringi) {
  if (guidstringi != NULL) {
    set_has_guidstring();
  } else {
    clear_has_guidstring();
  }
  guidstring_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), guidstringi);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.ThreadID.GuidString)
}

// optional string Name = 3;
inline bool ThreadID::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThreadID::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThreadID::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThreadID::clear_name() {
  name_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ThreadID::name() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.ThreadID.Name)
  return name_.GetNoArena();
}
inline void ThreadID::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.ThreadID.Name)
}
#if LANG_CXX11
inline void ThreadID::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.ThreadID.Name)
}
#endif
inline void ThreadID::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.ThreadID.Name)
}
inline void ThreadID::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.ThreadID.Name)
}
inline ::std::string* ThreadID::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.ThreadID.Name)
  return name_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThreadID::release_name() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.ThreadID.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThreadID::set_allocated_name(::std::string* namei) {
  if (namei != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), namei);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.ThreadID.Name)
}

// optional uint32 ColorARGB = 4 [default = 0];
inline bool ThreadID::has_colorargb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThreadID::set_has_colorargb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThreadID::clear_has_colorargb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThreadID::clear_colorargb() {
  colorargb_ = 0u;
  clear_has_colorargb();
}
inline ::spx_protobuf::protobuf::uint32 ThreadID::colorargb() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.ThreadID.ColorARGB)
  return colorargb_;
}
inline void ThreadID::set_colorargb(::spx_protobuf::protobuf::uint32 value) {
  set_has_colorargb();
  colorargb_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.ThreadID.ColorARGB)
}

// optional uint32 SubStream = 5;
inline bool ThreadID::has_substream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThreadID::set_has_substream() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThreadID::clear_has_substream() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThreadID::clear_substream() {
  substream_ = 0u;
  clear_has_substream();
}
inline ::spx_protobuf::protobuf::uint32 ThreadID::substream() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.ThreadID.SubStream)
  return substream_;
}
inline void ThreadID::set_substream(::spx_protobuf::protobuf::uint32 value) {
  set_has_substream();
  substream_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.ThreadID.SubStream)
}

// -------------------------------------------------------------------

// DataElement

// optional string Name = 1;
inline bool DataElement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataElement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataElement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataElement::clear_name() {
  name_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataElement::name() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.Name)
  return name_.GetNoArena();
}
inline void DataElement::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.Name)
}
#if LANG_CXX11
inline void DataElement::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DataElement.Name)
}
#endif
inline void DataElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataElement.Name)
}
inline void DataElement::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataElement.Name)
}
inline ::std::string* DataElement::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.Name)
  return name_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataElement::release_name() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataElement::set_allocated_name(::std::string* namei) {
  if (namei != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), namei);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.Name)
}

// optional .CRFS.Data.pbd2.StandardKeys Key = 2 [default = Not_Set];
inline bool DataElement::has_key() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DataElement::set_has_key() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DataElement::clear_has_key() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DataElement::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::CRFS::Data::pbd2::StandardKeys DataElement::key() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.Key)
  return static_cast< ::CRFS::Data::pbd2::StandardKeys >(key_);
}
inline void DataElement::set_key(::CRFS::Data::pbd2::StandardKeys value) {
  assert(::CRFS::Data::pbd2::StandardKeys_IsValid(value));
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.Key)
}

// optional .CRFS.Data.pbd2.NumericDataType IndexUnits = 3 [default = undefined];
inline bool DataElement::has_indexunits() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DataElement::set_has_indexunits() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DataElement::clear_has_indexunits() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DataElement::clear_indexunits() {
  indexunits_ = 0;
  clear_has_indexunits();
}
inline ::CRFS::Data::pbd2::NumericDataType DataElement::indexunits() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.IndexUnits)
  return static_cast< ::CRFS::Data::pbd2::NumericDataType >(indexunits_);
}
inline void DataElement::set_indexunits(::CRFS::Data::pbd2::NumericDataType value) {
  assert(::CRFS::Data::pbd2::NumericDataType_IsValid(value));
  set_has_indexunits();
  indexunits_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.IndexUnits)
}

// optional double IndexStart = 4;
inline bool DataElement::has_indexstart() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DataElement::set_has_indexstart() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DataElement::clear_has_indexstart() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DataElement::clear_indexstart() {
  indexstart_ = 0;
  clear_has_indexstart();
}
inline double DataElement::indexstart() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.IndexStart)
  return indexstart_;
}
inline void DataElement::set_indexstart(double value) {
  set_has_indexstart();
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.IndexStart)
}

// optional double IndexStop = 5;
inline bool DataElement::has_indexstop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DataElement::set_has_indexstop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DataElement::clear_has_indexstop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DataElement::clear_indexstop() {
  indexstop_ = 0;
  clear_has_indexstop();
}
inline double DataElement::indexstop() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.IndexStop)
  return indexstop_;
}
inline void DataElement::set_indexstop(double value) {
  set_has_indexstop();
  indexstop_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.IndexStop)
}

// optional .CRFS.Data.pbd2.DataStorage IndexDataStore = 6;
inline bool DataElement::has_indexdatastore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataElement::set_has_indexdatastore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataElement::clear_has_indexdatastore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataElement::clear_indexdatastore() {
  if (indexdatastore_ != NULL) indexdatastore_->Clear();
  clear_has_indexdatastore();
}
inline const ::CRFS::Data::pbd2::DataStorage& DataElement::indexdatastore() const {
  const ::CRFS::Data::pbd2::DataStorage* p = indexdatastore_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.IndexDataStore)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataStorage*>(
      &::CRFS::Data::pbd2::_DataStorage_default_instance_);
}
inline ::CRFS::Data::pbd2::DataStorage* DataElement::release_indexdatastore() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.IndexDataStore)
  clear_has_indexdatastore();
  ::CRFS::Data::pbd2::DataStorage* temp = indexdatastore_;
  indexdatastore_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataStorage* DataElement::mutable_indexdatastore() {
  set_has_indexdatastore();
  if (indexdatastore_ == NULL) {
    indexdatastore_ = new ::CRFS::Data::pbd2::DataStorage;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.IndexDataStore)
  return indexdatastore_;
}
inline void DataElement::set_allocated_indexdatastore(::CRFS::Data::pbd2::DataStorage* indexdatastorei) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete indexdatastore_;
  }
  if (indexdatastorei) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      indexdatastorei = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, indexdatastorei, submessage_arena);
    }
    set_has_indexdatastore();
  } else {
    clear_has_indexdatastore();
  }
  indexdatastore_ = indexdatastorei;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.IndexDataStore)
}

// optional .CRFS.Data.pbd2.NumericDataType DataUnits = 7 [default = undefined];
inline bool DataElement::has_dataunits() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DataElement::set_has_dataunits() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DataElement::clear_has_dataunits() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DataElement::clear_dataunits() {
  dataunits_ = 0;
  clear_has_dataunits();
}
inline ::CRFS::Data::pbd2::NumericDataType DataElement::dataunits() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.DataUnits)
  return static_cast< ::CRFS::Data::pbd2::NumericDataType >(dataunits_);
}
inline void DataElement::set_dataunits(::CRFS::Data::pbd2::NumericDataType value) {
  assert(::CRFS::Data::pbd2::NumericDataType_IsValid(value));
  set_has_dataunits();
  dataunits_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.DataUnits)
}

// optional .CRFS.Data.pbd2.DataElementType ElementType = 9;
inline bool DataElement::has_elementtype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DataElement::set_has_elementtype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DataElement::clear_has_elementtype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DataElement::clear_elementtype() {
  elementtype_ = 0;
  clear_has_elementtype();
}
inline ::CRFS::Data::pbd2::DataElementType DataElement::elementtype() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.ElementType)
  return static_cast< ::CRFS::Data::pbd2::DataElementType >(elementtype_);
}
inline void DataElement::set_elementtype(::CRFS::Data::pbd2::DataElementType value) {
  assert(::CRFS::Data::pbd2::DataElementType_IsValid(value));
  set_has_elementtype();
  elementtype_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElement.ElementType)
}

// optional .CRFS.Data.pbd2.DataElementBools BoolData = 20;
inline bool DataElement::has_booldata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataElement::set_has_booldata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataElement::clear_has_booldata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataElement::clear_booldata() {
  if (booldata_ != NULL) booldata_->Clear();
  clear_has_booldata();
}
inline const ::CRFS::Data::pbd2::DataElementBools& DataElement::booldata() const {
  const ::CRFS::Data::pbd2::DataElementBools* p = booldata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.BoolData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementBools*>(
      &::CRFS::Data::pbd2::_DataElementBools_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementBools* DataElement::release_booldata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.BoolData)
  clear_has_booldata();
  ::CRFS::Data::pbd2::DataElementBools* temp = booldata_;
  booldata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementBools* DataElement::mutable_booldata() {
  set_has_booldata();
  if (booldata_ == NULL) {
    booldata_ = new ::CRFS::Data::pbd2::DataElementBools;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.BoolData)
  return booldata_;
}
inline void DataElement::set_allocated_booldata(::CRFS::Data::pbd2::DataElementBools* booldatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete booldata_;
  }
  if (booldatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      booldatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, booldatai, submessage_arena);
    }
    set_has_booldata();
  } else {
    clear_has_booldata();
  }
  booldata_ = booldatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.BoolData)
}

// optional .CRFS.Data.pbd2.DataElementColors ColorData = 22;
inline bool DataElement::has_colordata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataElement::set_has_colordata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataElement::clear_has_colordata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataElement::clear_colordata() {
  if (colordata_ != NULL) colordata_->Clear();
  clear_has_colordata();
}
inline const ::CRFS::Data::pbd2::DataElementColors& DataElement::colordata() const {
  const ::CRFS::Data::pbd2::DataElementColors* p = colordata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.ColorData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementColors*>(
      &::CRFS::Data::pbd2::_DataElementColors_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementColors* DataElement::release_colordata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.ColorData)
  clear_has_colordata();
  ::CRFS::Data::pbd2::DataElementColors* temp = colordata_;
  colordata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementColors* DataElement::mutable_colordata() {
  set_has_colordata();
  if (colordata_ == NULL) {
    colordata_ = new ::CRFS::Data::pbd2::DataElementColors;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.ColorData)
  return colordata_;
}
inline void DataElement::set_allocated_colordata(::CRFS::Data::pbd2::DataElementColors* colordatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete colordata_;
  }
  if (colordatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      colordatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, colordatai, submessage_arena);
    }
    set_has_colordata();
  } else {
    clear_has_colordata();
  }
  colordata_ = colordatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.ColorData)
}

// optional .CRFS.Data.pbd2.DataElementDoubles DoubleData = 24;
inline bool DataElement::has_doubledata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataElement::set_has_doubledata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataElement::clear_has_doubledata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataElement::clear_doubledata() {
  if (doubledata_ != NULL) doubledata_->Clear();
  clear_has_doubledata();
}
inline const ::CRFS::Data::pbd2::DataElementDoubles& DataElement::doubledata() const {
  const ::CRFS::Data::pbd2::DataElementDoubles* p = doubledata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.DoubleData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementDoubles*>(
      &::CRFS::Data::pbd2::_DataElementDoubles_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementDoubles* DataElement::release_doubledata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.DoubleData)
  clear_has_doubledata();
  ::CRFS::Data::pbd2::DataElementDoubles* temp = doubledata_;
  doubledata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementDoubles* DataElement::mutable_doubledata() {
  set_has_doubledata();
  if (doubledata_ == NULL) {
    doubledata_ = new ::CRFS::Data::pbd2::DataElementDoubles;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.DoubleData)
  return doubledata_;
}
inline void DataElement::set_allocated_doubledata(::CRFS::Data::pbd2::DataElementDoubles* doubledatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doubledata_;
  }
  if (doubledatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      doubledatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, doubledatai, submessage_arena);
    }
    set_has_doubledata();
  } else {
    clear_has_doubledata();
  }
  doubledata_ = doubledatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.DoubleData)
}

// optional .CRFS.Data.pbd2.DataElementTrace TraceData = 25;
inline bool DataElement::has_tracedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataElement::set_has_tracedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataElement::clear_has_tracedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataElement::clear_tracedata() {
  if (tracedata_ != NULL) tracedata_->Clear();
  clear_has_tracedata();
}
inline const ::CRFS::Data::pbd2::DataElementTrace& DataElement::tracedata() const {
  const ::CRFS::Data::pbd2::DataElementTrace* p = tracedata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.TraceData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementTrace*>(
      &::CRFS::Data::pbd2::_DataElementTrace_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementTrace* DataElement::release_tracedata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.TraceData)
  clear_has_tracedata();
  ::CRFS::Data::pbd2::DataElementTrace* temp = tracedata_;
  tracedata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementTrace* DataElement::mutable_tracedata() {
  set_has_tracedata();
  if (tracedata_ == NULL) {
    tracedata_ = new ::CRFS::Data::pbd2::DataElementTrace;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.TraceData)
  return tracedata_;
}
inline void DataElement::set_allocated_tracedata(::CRFS::Data::pbd2::DataElementTrace* tracedatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tracedata_;
  }
  if (tracedatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tracedatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, tracedatai, submessage_arena);
    }
    set_has_tracedata();
  } else {
    clear_has_tracedata();
  }
  tracedata_ = tracedatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.TraceData)
}

// optional .CRFS.Data.pbd2.DataElementDoubleArray2D Double2dData = 26;
inline bool DataElement::has_double2ddata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataElement::set_has_double2ddata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataElement::clear_has_double2ddata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataElement::clear_double2ddata() {
  if (double2ddata_ != NULL) double2ddata_->Clear();
  clear_has_double2ddata();
}
inline const ::CRFS::Data::pbd2::DataElementDoubleArray2D& DataElement::double2ddata() const {
  const ::CRFS::Data::pbd2::DataElementDoubleArray2D* p = double2ddata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.Double2dData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementDoubleArray2D*>(
      &::CRFS::Data::pbd2::_DataElementDoubleArray2D_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementDoubleArray2D* DataElement::release_double2ddata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.Double2dData)
  clear_has_double2ddata();
  ::CRFS::Data::pbd2::DataElementDoubleArray2D* temp = double2ddata_;
  double2ddata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementDoubleArray2D* DataElement::mutable_double2ddata() {
  set_has_double2ddata();
  if (double2ddata_ == NULL) {
    double2ddata_ = new ::CRFS::Data::pbd2::DataElementDoubleArray2D;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.Double2dData)
  return double2ddata_;
}
inline void DataElement::set_allocated_double2ddata(::CRFS::Data::pbd2::DataElementDoubleArray2D* double2ddatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete double2ddata_;
  }
  if (double2ddatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      double2ddatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, double2ddatai, submessage_arena);
    }
    set_has_double2ddata();
  } else {
    clear_has_double2ddata();
  }
  double2ddata_ = double2ddatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.Double2dData)
}

// optional .CRFS.Data.pbd2.DataElementInts IntData = 27;
inline bool DataElement::has_intdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataElement::set_has_intdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataElement::clear_has_intdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataElement::clear_intdata() {
  if (intdata_ != NULL) intdata_->Clear();
  clear_has_intdata();
}
inline const ::CRFS::Data::pbd2::DataElementInts& DataElement::intdata() const {
  const ::CRFS::Data::pbd2::DataElementInts* p = intdata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.IntData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementInts*>(
      &::CRFS::Data::pbd2::_DataElementInts_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementInts* DataElement::release_intdata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.IntData)
  clear_has_intdata();
  ::CRFS::Data::pbd2::DataElementInts* temp = intdata_;
  intdata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementInts* DataElement::mutable_intdata() {
  set_has_intdata();
  if (intdata_ == NULL) {
    intdata_ = new ::CRFS::Data::pbd2::DataElementInts;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.IntData)
  return intdata_;
}
inline void DataElement::set_allocated_intdata(::CRFS::Data::pbd2::DataElementInts* intdatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete intdata_;
  }
  if (intdatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intdatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, intdatai, submessage_arena);
    }
    set_has_intdata();
  } else {
    clear_has_intdata();
  }
  intdata_ = intdatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.IntData)
}

// optional .CRFS.Data.pbd2.DataElementStrings StringData = 28;
inline bool DataElement::has_stringdata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataElement::set_has_stringdata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataElement::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataElement::clear_stringdata() {
  if (stringdata_ != NULL) stringdata_->Clear();
  clear_has_stringdata();
}
inline const ::CRFS::Data::pbd2::DataElementStrings& DataElement::stringdata() const {
  const ::CRFS::Data::pbd2::DataElementStrings* p = stringdata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.StringData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementStrings*>(
      &::CRFS::Data::pbd2::_DataElementStrings_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementStrings* DataElement::release_stringdata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.StringData)
  clear_has_stringdata();
  ::CRFS::Data::pbd2::DataElementStrings* temp = stringdata_;
  stringdata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementStrings* DataElement::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == NULL) {
    stringdata_ = new ::CRFS::Data::pbd2::DataElementStrings;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.StringData)
  return stringdata_;
}
inline void DataElement::set_allocated_stringdata(::CRFS::Data::pbd2::DataElementStrings* stringdatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stringdata_;
  }
  if (stringdatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stringdatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, stringdatai, submessage_arena);
    }
    set_has_stringdata();
  } else {
    clear_has_stringdata();
  }
  stringdata_ = stringdatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.StringData)
}

// optional .CRFS.Data.pbd2.DataElementUInts UIntData = 29;
inline bool DataElement::has_uintdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataElement::set_has_uintdata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataElement::clear_has_uintdata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataElement::clear_uintdata() {
  if (uintdata_ != NULL) uintdata_->Clear();
  clear_has_uintdata();
}
inline const ::CRFS::Data::pbd2::DataElementUInts& DataElement::uintdata() const {
  const ::CRFS::Data::pbd2::DataElementUInts* p = uintdata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.UIntData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementUInts*>(
      &::CRFS::Data::pbd2::_DataElementUInts_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementUInts* DataElement::release_uintdata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.UIntData)
  clear_has_uintdata();
  ::CRFS::Data::pbd2::DataElementUInts* temp = uintdata_;
  uintdata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementUInts* DataElement::mutable_uintdata() {
  set_has_uintdata();
  if (uintdata_ == NULL) {
    uintdata_ = new ::CRFS::Data::pbd2::DataElementUInts;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.UIntData)
  return uintdata_;
}
inline void DataElement::set_allocated_uintdata(::CRFS::Data::pbd2::DataElementUInts* uintdatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete uintdata_;
  }
  if (uintdatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uintdatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, uintdatai, submessage_arena);
    }
    set_has_uintdata();
  } else {
    clear_has_uintdata();
  }
  uintdata_ = uintdatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.UIntData)
}

// optional .CRFS.Data.pbd2.DataElementGuids GuidData = 30;
inline bool DataElement::has_guiddata() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataElement::set_has_guiddata() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataElement::clear_has_guiddata() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataElement::clear_guiddata() {
  if (guiddata_ != NULL) guiddata_->Clear();
  clear_has_guiddata();
}
inline const ::CRFS::Data::pbd2::DataElementGuids& DataElement::guiddata() const {
  const ::CRFS::Data::pbd2::DataElementGuids* p = guiddata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.GuidData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementGuids*>(
      &::CRFS::Data::pbd2::_DataElementGuids_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementGuids* DataElement::release_guiddata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.GuidData)
  clear_has_guiddata();
  ::CRFS::Data::pbd2::DataElementGuids* temp = guiddata_;
  guiddata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementGuids* DataElement::mutable_guiddata() {
  set_has_guiddata();
  if (guiddata_ == NULL) {
    guiddata_ = new ::CRFS::Data::pbd2::DataElementGuids;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.GuidData)
  return guiddata_;
}
inline void DataElement::set_allocated_guiddata(::CRFS::Data::pbd2::DataElementGuids* guiddatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guiddata_;
  }
  if (guiddatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guiddatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, guiddatai, submessage_arena);
    }
    set_has_guiddata();
  } else {
    clear_has_guiddata();
  }
  guiddata_ = guiddatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.GuidData)
}

// optional .CRFS.Data.pbd2.DataElementDataGenerics EmbeddedDataGenericData = 31;
inline bool DataElement::has_embeddeddatagenericdata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataElement::set_has_embeddeddatagenericdata() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataElement::clear_has_embeddeddatagenericdata() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataElement::clear_embeddeddatagenericdata() {
  if (embeddeddatagenericdata_ != NULL) embeddeddatagenericdata_->Clear();
  clear_has_embeddeddatagenericdata();
}
inline const ::CRFS::Data::pbd2::DataElementDataGenerics& DataElement::embeddeddatagenericdata() const {
  const ::CRFS::Data::pbd2::DataElementDataGenerics* p = embeddeddatagenericdata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.EmbeddedDataGenericData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementDataGenerics*>(
      &::CRFS::Data::pbd2::_DataElementDataGenerics_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementDataGenerics* DataElement::release_embeddeddatagenericdata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.EmbeddedDataGenericData)
  clear_has_embeddeddatagenericdata();
  ::CRFS::Data::pbd2::DataElementDataGenerics* temp = embeddeddatagenericdata_;
  embeddeddatagenericdata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementDataGenerics* DataElement::mutable_embeddeddatagenericdata() {
  set_has_embeddeddatagenericdata();
  if (embeddeddatagenericdata_ == NULL) {
    embeddeddatagenericdata_ = new ::CRFS::Data::pbd2::DataElementDataGenerics;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.EmbeddedDataGenericData)
  return embeddeddatagenericdata_;
}
inline void DataElement::set_allocated_embeddeddatagenericdata(::CRFS::Data::pbd2::DataElementDataGenerics* embeddeddatagenericdatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete embeddeddatagenericdata_;
  }
  if (embeddeddatagenericdatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      embeddeddatagenericdatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, embeddeddatagenericdatai, submessage_arena);
    }
    set_has_embeddeddatagenericdata();
  } else {
    clear_has_embeddeddatagenericdata();
  }
  embeddeddatagenericdata_ = embeddeddatagenericdatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.EmbeddedDataGenericData)
}

// optional .CRFS.Data.pbd2.DataElementBytes ByteData = 32;
inline bool DataElement::has_bytedata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataElement::set_has_bytedata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataElement::clear_has_bytedata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataElement::clear_bytedata() {
  if (bytedata_ != NULL) bytedata_->Clear();
  clear_has_bytedata();
}
inline const ::CRFS::Data::pbd2::DataElementBytes& DataElement::bytedata() const {
  const ::CRFS::Data::pbd2::DataElementBytes* p = bytedata_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.ByteData)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementBytes*>(
      &::CRFS::Data::pbd2::_DataElementBytes_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementBytes* DataElement::release_bytedata() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.ByteData)
  clear_has_bytedata();
  ::CRFS::Data::pbd2::DataElementBytes* temp = bytedata_;
  bytedata_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementBytes* DataElement::mutable_bytedata() {
  set_has_bytedata();
  if (bytedata_ == NULL) {
    bytedata_ = new ::CRFS::Data::pbd2::DataElementBytes;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.ByteData)
  return bytedata_;
}
inline void DataElement::set_allocated_bytedata(::CRFS::Data::pbd2::DataElementBytes* bytedatai) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bytedata_;
  }
  if (bytedatai) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bytedatai = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, bytedatai, submessage_arena);
    }
    set_has_bytedata();
  } else {
    clear_has_bytedata();
  }
  bytedata_ = bytedatai;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.ByteData)
}

// optional .CRFS.Data.pbd2.DataElementCollection ElementAttributes = 33;
inline bool DataElement::has_elementattributes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DataElement::set_has_elementattributes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DataElement::clear_has_elementattributes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DataElement::clear_elementattributes() {
  if (elementattributes_ != NULL) elementattributes_->Clear();
  clear_has_elementattributes();
}
inline const ::CRFS::Data::pbd2::DataElementCollection& DataElement::elementattributes() const {
  const ::CRFS::Data::pbd2::DataElementCollection* p = elementattributes_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElement.ElementAttributes)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataElementCollection*>(
      &::CRFS::Data::pbd2::_DataElementCollection_default_instance_);
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataElement::release_elementattributes() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElement.ElementAttributes)
  clear_has_elementattributes();
  ::CRFS::Data::pbd2::DataElementCollection* temp = elementattributes_;
  elementattributes_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataElementCollection* DataElement::mutable_elementattributes() {
  set_has_elementattributes();
  if (elementattributes_ == NULL) {
    elementattributes_ = new ::CRFS::Data::pbd2::DataElementCollection;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElement.ElementAttributes)
  return elementattributes_;
}
inline void DataElement::set_allocated_elementattributes(::CRFS::Data::pbd2::DataElementCollection* elementattributesi) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elementattributes_;
  }
  if (elementattributesi) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elementattributesi = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, elementattributesi, submessage_arena);
    }
    set_has_elementattributes();
  } else {
    clear_has_elementattributes();
  }
  elementattributes_ = elementattributesi;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElement.ElementAttributes)
}

// -------------------------------------------------------------------

// DataElementBools

// repeated bool Values = 1;
inline int DataElementBools::values_size() const {
  return values_.size();
}
inline void DataElementBools::clear_values() {
  values_.Clear();
}
inline bool DataElementBools::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementBools.Values)
  return values_.Get(index);
}
inline void DataElementBools::set_values(int index, bool value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementBools.Values)
}
inline void DataElementBools::add_values(bool value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementBools.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedField< bool >&
DataElementBools::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementBools.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedField< bool >*
DataElementBools::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementBools.Values)
  return &values_;
}

// -------------------------------------------------------------------

// DataElementColors

// repeated uint32 ColorsARGB = 1;
inline int DataElementColors::colorsargb_size() const {
  return colorsargb_.size();
}
inline void DataElementColors::clear_colorsargb() {
  colorsargb_.Clear();
}
inline ::spx_protobuf::protobuf::uint32 DataElementColors::colorsargb(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementColors.ColorsARGB)
  return colorsargb_.Get(index);
}
inline void DataElementColors::set_colorsargb(int index, ::spx_protobuf::protobuf::uint32 value) {
  colorsargb_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementColors.ColorsARGB)
}
inline void DataElementColors::add_colorsargb(::spx_protobuf::protobuf::uint32 value) {
  colorsargb_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementColors.ColorsARGB)
}
inline const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >&
DataElementColors::colorsargb() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementColors.ColorsARGB)
  return colorsargb_;
}
inline ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >*
DataElementColors::mutable_colorsargb() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementColors.ColorsARGB)
  return &colorsargb_;
}

// -------------------------------------------------------------------

// DataElementDoubleArray2D

// optional uint32 Width = 1 [default = 0];
inline bool DataElementDoubleArray2D::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataElementDoubleArray2D::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataElementDoubleArray2D::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataElementDoubleArray2D::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::spx_protobuf::protobuf::uint32 DataElementDoubleArray2D::width() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementDoubleArray2D.Width)
  return width_;
}
inline void DataElementDoubleArray2D::set_width(::spx_protobuf::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementDoubleArray2D.Width)
}

// optional .CRFS.Data.pbd2.DataStorage DataStore = 2;
inline bool DataElementDoubleArray2D::has_datastore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataElementDoubleArray2D::set_has_datastore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataElementDoubleArray2D::clear_has_datastore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataElementDoubleArray2D::clear_datastore() {
  if (datastore_ != NULL) datastore_->Clear();
  clear_has_datastore();
}
inline const ::CRFS::Data::pbd2::DataStorage& DataElementDoubleArray2D::datastore() const {
  const ::CRFS::Data::pbd2::DataStorage* p = datastore_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementDoubleArray2D.DataStore)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataStorage*>(
      &::CRFS::Data::pbd2::_DataStorage_default_instance_);
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementDoubleArray2D::release_datastore() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElementDoubleArray2D.DataStore)
  clear_has_datastore();
  ::CRFS::Data::pbd2::DataStorage* temp = datastore_;
  datastore_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementDoubleArray2D::mutable_datastore() {
  set_has_datastore();
  if (datastore_ == NULL) {
    datastore_ = new ::CRFS::Data::pbd2::DataStorage;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementDoubleArray2D.DataStore)
  return datastore_;
}
inline void DataElementDoubleArray2D::set_allocated_datastore(::CRFS::Data::pbd2::DataStorage* datastorei) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete datastore_;
  }
  if (datastorei) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      datastorei = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, datastorei, submessage_arena);
    }
    set_has_datastore();
  } else {
    clear_has_datastore();
  }
  datastore_ = datastorei;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElementDoubleArray2D.DataStore)
}

// -------------------------------------------------------------------

// DataElementDoubles

// repeated double Values = 1;
inline int DataElementDoubles::values_size() const {
  return values_.size();
}
inline void DataElementDoubles::clear_values() {
  values_.Clear();
}
inline double DataElementDoubles::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementDoubles.Values)
  return values_.Get(index);
}
inline void DataElementDoubles::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementDoubles.Values)
}
inline void DataElementDoubles::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementDoubles.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedField< double >&
DataElementDoubles::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementDoubles.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedField< double >*
DataElementDoubles::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementDoubles.Values)
  return &values_;
}

// -------------------------------------------------------------------

// DataElementGuids

// repeated string GuidStrings = 2;
inline int DataElementGuids::guidstrings_size() const {
  return guidstrings_.size();
}
inline void DataElementGuids::clear_guidstrings() {
  guidstrings_.Clear();
}
inline const ::std::string& DataElementGuids::guidstrings(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  return guidstrings_.Get(index);
}
inline ::std::string* DataElementGuids::mutable_guidstrings(int index) {
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  return guidstrings_.Mutable(index);
}
inline void DataElementGuids::set_guidstrings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  guidstrings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DataElementGuids::set_guidstrings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  guidstrings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DataElementGuids::set_guidstrings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  guidstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
inline void DataElementGuids::set_guidstrings(int index, const char* value, size_t size) {
  guidstrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
inline ::std::string* DataElementGuids::add_guidstrings() {
  // @@protoc_insertion_point(field_add_mutable:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  return guidstrings_.Add();
}
inline void DataElementGuids::add_guidstrings(const ::std::string& value) {
  guidstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
#if LANG_CXX11
inline void DataElementGuids::add_guidstrings(::std::string&& value) {
  guidstrings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
#endif
inline void DataElementGuids::add_guidstrings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  guidstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
inline void DataElementGuids::add_guidstrings(const char* value, size_t size) {
  guidstrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
}
inline const ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>&
DataElementGuids::guidstrings() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  return guidstrings_;
}
inline ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>*
DataElementGuids::mutable_guidstrings() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementGuids.GuidStrings)
  return &guidstrings_;
}

// -------------------------------------------------------------------

// DataElementInts

// repeated int32 Values = 1;
inline int DataElementInts::values_size() const {
  return values_.size();
}
inline void DataElementInts::clear_values() {
  values_.Clear();
}
inline ::spx_protobuf::protobuf::int32 DataElementInts::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementInts.Values)
  return values_.Get(index);
}
inline void DataElementInts::set_values(int index, ::spx_protobuf::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementInts.Values)
}
inline void DataElementInts::add_values(::spx_protobuf::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementInts.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::int32 >&
DataElementInts::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementInts.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::int32 >*
DataElementInts::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementInts.Values)
  return &values_;
}

// -------------------------------------------------------------------

// DataElementStrings

// repeated string Values = 1;
inline int DataElementStrings::values_size() const {
  return values_.size();
}
inline void DataElementStrings::clear_values() {
  values_.Clear();
}
inline const ::std::string& DataElementStrings::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementStrings.Values)
  return values_.Get(index);
}
inline ::std::string* DataElementStrings::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementStrings.Values)
  return values_.Mutable(index);
}
inline void DataElementStrings::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementStrings.Values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DataElementStrings::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementStrings.Values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DataElementStrings::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataElementStrings.Values)
}
inline void DataElementStrings::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataElementStrings.Values)
}
inline ::std::string* DataElementStrings::add_values() {
  // @@protoc_insertion_point(field_add_mutable:CRFS.Data.pbd2.DataElementStrings.Values)
  return values_.Add();
}
inline void DataElementStrings::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementStrings.Values)
}
#if LANG_CXX11
inline void DataElementStrings::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementStrings.Values)
}
#endif
inline void DataElementStrings::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRFS.Data.pbd2.DataElementStrings.Values)
}
inline void DataElementStrings::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRFS.Data.pbd2.DataElementStrings.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>&
DataElementStrings::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementStrings.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedPtrField< ::std::string>*
DataElementStrings::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementStrings.Values)
  return &values_;
}

// optional .CRFS.Data.pbd2.TextFunction TextFunction = 2 [default = Undefined];
inline bool DataElementStrings::has_textfunction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataElementStrings::set_has_textfunction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataElementStrings::clear_has_textfunction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataElementStrings::clear_textfunction() {
  textfunction_ = 0;
  clear_has_textfunction();
}
inline ::CRFS::Data::pbd2::TextFunction DataElementStrings::textfunction() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementStrings.TextFunction)
  return static_cast< ::CRFS::Data::pbd2::TextFunction >(textfunction_);
}
inline void DataElementStrings::set_textfunction(::CRFS::Data::pbd2::TextFunction value) {
  assert(::CRFS::Data::pbd2::TextFunction_IsValid(value));
  set_has_textfunction();
  textfunction_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementStrings.TextFunction)
}

// -------------------------------------------------------------------

// DataElementTrace

// optional .CRFS.Data.pbd2.DataStorage YDataStore = 2;
inline bool DataElementTrace::has_ydatastore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataElementTrace::set_has_ydatastore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataElementTrace::clear_has_ydatastore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataElementTrace::clear_ydatastore() {
  if (ydatastore_ != NULL) ydatastore_->Clear();
  clear_has_ydatastore();
}
inline const ::CRFS::Data::pbd2::DataStorage& DataElementTrace::ydatastore() const {
  const ::CRFS::Data::pbd2::DataStorage* p = ydatastore_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementTrace.YDataStore)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataStorage*>(
      &::CRFS::Data::pbd2::_DataStorage_default_instance_);
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementTrace::release_ydatastore() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElementTrace.YDataStore)
  clear_has_ydatastore();
  ::CRFS::Data::pbd2::DataStorage* temp = ydatastore_;
  ydatastore_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementTrace::mutable_ydatastore() {
  set_has_ydatastore();
  if (ydatastore_ == NULL) {
    ydatastore_ = new ::CRFS::Data::pbd2::DataStorage;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementTrace.YDataStore)
  return ydatastore_;
}
inline void DataElementTrace::set_allocated_ydatastore(::CRFS::Data::pbd2::DataStorage* ydatastorei) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ydatastore_;
  }
  if (ydatastorei) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ydatastorei = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, ydatastorei, submessage_arena);
    }
    set_has_ydatastore();
  } else {
    clear_has_ydatastore();
  }
  ydatastore_ = ydatastorei;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElementTrace.YDataStore)
}

// optional .CRFS.Data.pbd2.DataStorage ZDataStore = 3;
inline bool DataElementTrace::has_zdatastore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataElementTrace::set_has_zdatastore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataElementTrace::clear_has_zdatastore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataElementTrace::clear_zdatastore() {
  if (zdatastore_ != NULL) zdatastore_->Clear();
  clear_has_zdatastore();
}
inline const ::CRFS::Data::pbd2::DataStorage& DataElementTrace::zdatastore() const {
  const ::CRFS::Data::pbd2::DataStorage* p = zdatastore_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementTrace.ZDataStore)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DataStorage*>(
      &::CRFS::Data::pbd2::_DataStorage_default_instance_);
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementTrace::release_zdatastore() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElementTrace.ZDataStore)
  clear_has_zdatastore();
  ::CRFS::Data::pbd2::DataStorage* temp = zdatastore_;
  zdatastore_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DataStorage* DataElementTrace::mutable_zdatastore() {
  set_has_zdatastore();
  if (zdatastore_ == NULL) {
    zdatastore_ = new ::CRFS::Data::pbd2::DataStorage;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementTrace.ZDataStore)
  return zdatastore_;
}
inline void DataElementTrace::set_allocated_zdatastore(::CRFS::Data::pbd2::DataStorage* zdatastorei) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zdatastore_;
  }
  if (zdatastorei) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zdatastorei = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, zdatastorei, submessage_arena);
    }
    set_has_zdatastore();
  } else {
    clear_has_zdatastore();
  }
  zdatastore_ = zdatastorei;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElementTrace.ZDataStore)
}

// optional .CRFS.Data.pbd2.NumericDataType ZUnits = 4 [default = undefined];
inline bool DataElementTrace::has_zunits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataElementTrace::set_has_zunits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataElementTrace::clear_has_zunits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataElementTrace::clear_zunits() {
  zunits_ = 0;
  clear_has_zunits();
}
inline ::CRFS::Data::pbd2::NumericDataType DataElementTrace::zunits() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementTrace.ZUnits)
  return static_cast< ::CRFS::Data::pbd2::NumericDataType >(zunits_);
}
inline void DataElementTrace::set_zunits(::CRFS::Data::pbd2::NumericDataType value) {
  assert(::CRFS::Data::pbd2::NumericDataType_IsValid(value));
  set_has_zunits();
  zunits_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementTrace.ZUnits)
}

// optional .CRFS.Data.pbd2.ElementTraceType TraceType = 5 [default = Real];
inline bool DataElementTrace::has_tracetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataElementTrace::set_has_tracetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataElementTrace::clear_has_tracetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataElementTrace::clear_tracetype() {
  tracetype_ = 0;
  clear_has_tracetype();
}
inline ::CRFS::Data::pbd2::ElementTraceType DataElementTrace::tracetype() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementTrace.TraceType)
  return static_cast< ::CRFS::Data::pbd2::ElementTraceType >(tracetype_);
}
inline void DataElementTrace::set_tracetype(::CRFS::Data::pbd2::ElementTraceType value) {
  assert(::CRFS::Data::pbd2::ElementTraceType_IsValid(value));
  set_has_tracetype();
  tracetype_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementTrace.TraceType)
}

// -------------------------------------------------------------------

// DataElementUInts

// repeated uint32 Values = 1;
inline int DataElementUInts::values_size() const {
  return values_.size();
}
inline void DataElementUInts::clear_values() {
  values_.Clear();
}
inline ::spx_protobuf::protobuf::uint32 DataElementUInts::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementUInts.Values)
  return values_.Get(index);
}
inline void DataElementUInts::set_values(int index, ::spx_protobuf::protobuf::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementUInts.Values)
}
inline void DataElementUInts::add_values(::spx_protobuf::protobuf::uint32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementUInts.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >&
DataElementUInts::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementUInts.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedField< ::spx_protobuf::protobuf::uint32 >*
DataElementUInts::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementUInts.Values)
  return &values_;
}

// -------------------------------------------------------------------

// DataElementDataGenerics

// repeated .CRFS.Data.pbd2.DataGeneric Values = 1;
inline int DataElementDataGenerics::values_size() const {
  return values_.size();
}
inline void DataElementDataGenerics::clear_values() {
  values_.Clear();
}
inline const ::CRFS::Data::pbd2::DataGeneric& DataElementDataGenerics::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementDataGenerics.Values)
  return values_.Get(index);
}
inline ::CRFS::Data::pbd2::DataGeneric* DataElementDataGenerics::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementDataGenerics.Values)
  return values_.Mutable(index);
}
inline ::CRFS::Data::pbd2::DataGeneric* DataElementDataGenerics::add_values() {
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DataElementDataGenerics.Values)
  return values_.Add();
}
inline ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataGeneric >*
DataElementDataGenerics::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DataElementDataGenerics.Values)
  return &values_;
}
inline const ::spx_protobuf::protobuf::RepeatedPtrField< ::CRFS::Data::pbd2::DataGeneric >&
DataElementDataGenerics::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DataElementDataGenerics.Values)
  return values_;
}

// -------------------------------------------------------------------

// DataElementBytes

// optional .CRFS.Data.pbd2.ByteDataContentType ContentType = 1 [default = blob];
inline bool DataElementBytes::has_contenttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataElementBytes::set_has_contenttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataElementBytes::clear_has_contenttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataElementBytes::clear_contenttype() {
  contenttype_ = 0;
  clear_has_contenttype();
}
inline ::CRFS::Data::pbd2::ByteDataContentType DataElementBytes::contenttype() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementBytes.ContentType)
  return static_cast< ::CRFS::Data::pbd2::ByteDataContentType >(contenttype_);
}
inline void DataElementBytes::set_contenttype(::CRFS::Data::pbd2::ByteDataContentType value) {
  assert(::CRFS::Data::pbd2::ByteDataContentType_IsValid(value));
  set_has_contenttype();
  contenttype_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementBytes.ContentType)
}

// optional string Description = 2;
inline bool DataElementBytes::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataElementBytes::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataElementBytes::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataElementBytes::clear_description() {
  description_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& DataElementBytes::description() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementBytes.Description)
  return description_.GetNoArena();
}
inline void DataElementBytes::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementBytes.Description)
}
#if LANG_CXX11
inline void DataElementBytes::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DataElementBytes.Description)
}
#endif
inline void DataElementBytes::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataElementBytes.Description)
}
inline void DataElementBytes::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataElementBytes.Description)
}
inline ::std::string* DataElementBytes::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementBytes.Description)
  return description_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataElementBytes::release_description() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElementBytes.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataElementBytes::set_allocated_description(::std::string* descriptioni) {
  if (descriptioni != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), descriptioni);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElementBytes.Description)
}

// optional bytes Values = 3;
inline bool DataElementBytes::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataElementBytes::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataElementBytes::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataElementBytes::clear_values() {
  values_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_values();
}
inline const ::std::string& DataElementBytes::values() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataElementBytes.Values)
  return values_.GetNoArena();
}
inline void DataElementBytes::set_values(const ::std::string& value) {
  set_has_values();
  values_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataElementBytes.Values)
}
#if LANG_CXX11
inline void DataElementBytes::set_values(::std::string&& value) {
  set_has_values();
  values_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DataElementBytes.Values)
}
#endif
inline void DataElementBytes::set_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_values();
  values_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DataElementBytes.Values)
}
inline void DataElementBytes::set_values(const void* value, size_t size) {
  set_has_values();
  values_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DataElementBytes.Values)
}
inline ::std::string* DataElementBytes::mutable_values() {
  set_has_values();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataElementBytes.Values)
  return values_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataElementBytes::release_values() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataElementBytes.Values)
  clear_has_values();
  return values_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataElementBytes::set_allocated_values(::std::string* valuesi) {
  if (valuesi != NULL) {
    set_has_values();
  } else {
    clear_has_values();
  }
  values_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), valuesi);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataElementBytes.Values)
}

// -------------------------------------------------------------------

// DataStorage

// optional .CRFS.Data.pbd2.DataStorageFormats StorageFormat = 39;
inline bool DataStorage::has_storageformat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataStorage::set_has_storageformat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataStorage::clear_has_storageformat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataStorage::clear_storageformat() {
  storageformat_ = 0;
  clear_has_storageformat();
}
inline ::CRFS::Data::pbd2::DataStorageFormats DataStorage::storageformat() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.StorageFormat)
  return static_cast< ::CRFS::Data::pbd2::DataStorageFormats >(storageformat_);
}
inline void DataStorage::set_storageformat(::CRFS::Data::pbd2::DataStorageFormats value) {
  assert(::CRFS::Data::pbd2::DataStorageFormats_IsValid(value));
  set_has_storageformat();
  storageformat_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DataStorage.StorageFormat)
}

// optional .CRFS.Data.pbd2.DsDouble DsDouble = 43;
inline bool DataStorage::has_dsdouble() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataStorage::set_has_dsdouble() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataStorage::clear_has_dsdouble() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataStorage::clear_dsdouble() {
  if (dsdouble_ != NULL) dsdouble_->Clear();
  clear_has_dsdouble();
}
inline const ::CRFS::Data::pbd2::DsDouble& DataStorage::dsdouble() const {
  const ::CRFS::Data::pbd2::DsDouble* p = dsdouble_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.DsDouble)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DsDouble*>(
      &::CRFS::Data::pbd2::_DsDouble_default_instance_);
}
inline ::CRFS::Data::pbd2::DsDouble* DataStorage::release_dsdouble() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataStorage.DsDouble)
  clear_has_dsdouble();
  ::CRFS::Data::pbd2::DsDouble* temp = dsdouble_;
  dsdouble_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DsDouble* DataStorage::mutable_dsdouble() {
  set_has_dsdouble();
  if (dsdouble_ == NULL) {
    dsdouble_ = new ::CRFS::Data::pbd2::DsDouble;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataStorage.DsDouble)
  return dsdouble_;
}
inline void DataStorage::set_allocated_dsdouble(::CRFS::Data::pbd2::DsDouble* dsdoublei) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dsdouble_;
  }
  if (dsdoublei) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dsdoublei = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, dsdoublei, submessage_arena);
    }
    set_has_dsdouble();
  } else {
    clear_has_dsdouble();
  }
  dsdouble_ = dsdoublei;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataStorage.DsDouble)
}

// optional .CRFS.Data.pbd2.DsDouble8 DsDouble8 = 44;
inline bool DataStorage::has_dsdouble8() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataStorage::set_has_dsdouble8() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataStorage::clear_has_dsdouble8() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataStorage::clear_dsdouble8() {
  if (dsdouble8_ != NULL) dsdouble8_->Clear();
  clear_has_dsdouble8();
}
inline const ::CRFS::Data::pbd2::DsDouble8& DataStorage::dsdouble8() const {
  const ::CRFS::Data::pbd2::DsDouble8* p = dsdouble8_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.DsDouble8)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DsDouble8*>(
      &::CRFS::Data::pbd2::_DsDouble8_default_instance_);
}
inline ::CRFS::Data::pbd2::DsDouble8* DataStorage::release_dsdouble8() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataStorage.DsDouble8)
  clear_has_dsdouble8();
  ::CRFS::Data::pbd2::DsDouble8* temp = dsdouble8_;
  dsdouble8_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DsDouble8* DataStorage::mutable_dsdouble8() {
  set_has_dsdouble8();
  if (dsdouble8_ == NULL) {
    dsdouble8_ = new ::CRFS::Data::pbd2::DsDouble8;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataStorage.DsDouble8)
  return dsdouble8_;
}
inline void DataStorage::set_allocated_dsdouble8(::CRFS::Data::pbd2::DsDouble8* dsdouble8i) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dsdouble8_;
  }
  if (dsdouble8i) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dsdouble8i = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, dsdouble8i, submessage_arena);
    }
    set_has_dsdouble8();
  } else {
    clear_has_dsdouble8();
  }
  dsdouble8_ = dsdouble8i;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataStorage.DsDouble8)
}

// optional .CRFS.Data.pbd2.DsDouble16 DsDouble16 = 45;
inline bool DataStorage::has_dsdouble16() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataStorage::set_has_dsdouble16() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataStorage::clear_has_dsdouble16() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataStorage::clear_dsdouble16() {
  if (dsdouble16_ != NULL) dsdouble16_->Clear();
  clear_has_dsdouble16();
}
inline const ::CRFS::Data::pbd2::DsDouble16& DataStorage::dsdouble16() const {
  const ::CRFS::Data::pbd2::DsDouble16* p = dsdouble16_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.DsDouble16)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DsDouble16*>(
      &::CRFS::Data::pbd2::_DsDouble16_default_instance_);
}
inline ::CRFS::Data::pbd2::DsDouble16* DataStorage::release_dsdouble16() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataStorage.DsDouble16)
  clear_has_dsdouble16();
  ::CRFS::Data::pbd2::DsDouble16* temp = dsdouble16_;
  dsdouble16_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DsDouble16* DataStorage::mutable_dsdouble16() {
  set_has_dsdouble16();
  if (dsdouble16_ == NULL) {
    dsdouble16_ = new ::CRFS::Data::pbd2::DsDouble16;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataStorage.DsDouble16)
  return dsdouble16_;
}
inline void DataStorage::set_allocated_dsdouble16(::CRFS::Data::pbd2::DsDouble16* dsdouble16i) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dsdouble16_;
  }
  if (dsdouble16i) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dsdouble16i = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, dsdouble16i, submessage_arena);
    }
    set_has_dsdouble16();
  } else {
    clear_has_dsdouble16();
  }
  dsdouble16_ = dsdouble16i;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataStorage.DsDouble16)
}

// optional .CRFS.Data.pbd2.DsDouble32 DsDouble32 = 46;
inline bool DataStorage::has_dsdouble32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataStorage::set_has_dsdouble32() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataStorage::clear_has_dsdouble32() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataStorage::clear_dsdouble32() {
  if (dsdouble32_ != NULL) dsdouble32_->Clear();
  clear_has_dsdouble32();
}
inline const ::CRFS::Data::pbd2::DsDouble32& DataStorage::dsdouble32() const {
  const ::CRFS::Data::pbd2::DsDouble32* p = dsdouble32_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.DsDouble32)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DsDouble32*>(
      &::CRFS::Data::pbd2::_DsDouble32_default_instance_);
}
inline ::CRFS::Data::pbd2::DsDouble32* DataStorage::release_dsdouble32() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataStorage.DsDouble32)
  clear_has_dsdouble32();
  ::CRFS::Data::pbd2::DsDouble32* temp = dsdouble32_;
  dsdouble32_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DsDouble32* DataStorage::mutable_dsdouble32() {
  set_has_dsdouble32();
  if (dsdouble32_ == NULL) {
    dsdouble32_ = new ::CRFS::Data::pbd2::DsDouble32;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataStorage.DsDouble32)
  return dsdouble32_;
}
inline void DataStorage::set_allocated_dsdouble32(::CRFS::Data::pbd2::DsDouble32* dsdouble32i) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dsdouble32_;
  }
  if (dsdouble32i) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dsdouble32i = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, dsdouble32i, submessage_arena);
    }
    set_has_dsdouble32();
  } else {
    clear_has_dsdouble32();
  }
  dsdouble32_ = dsdouble32i;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataStorage.DsDouble32)
}

// optional .CRFS.Data.pbd2.DsFloat DsFloat = 47;
inline bool DataStorage::has_dsfloat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataStorage::set_has_dsfloat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataStorage::clear_has_dsfloat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataStorage::clear_dsfloat() {
  if (dsfloat_ != NULL) dsfloat_->Clear();
  clear_has_dsfloat();
}
inline const ::CRFS::Data::pbd2::DsFloat& DataStorage::dsfloat() const {
  const ::CRFS::Data::pbd2::DsFloat* p = dsfloat_;
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DataStorage.DsFloat)
  return p != NULL ? *p : *reinterpret_cast<const ::CRFS::Data::pbd2::DsFloat*>(
      &::CRFS::Data::pbd2::_DsFloat_default_instance_);
}
inline ::CRFS::Data::pbd2::DsFloat* DataStorage::release_dsfloat() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DataStorage.DsFloat)
  clear_has_dsfloat();
  ::CRFS::Data::pbd2::DsFloat* temp = dsfloat_;
  dsfloat_ = NULL;
  return temp;
}
inline ::CRFS::Data::pbd2::DsFloat* DataStorage::mutable_dsfloat() {
  set_has_dsfloat();
  if (dsfloat_ == NULL) {
    dsfloat_ = new ::CRFS::Data::pbd2::DsFloat;
  }
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DataStorage.DsFloat)
  return dsfloat_;
}
inline void DataStorage::set_allocated_dsfloat(::CRFS::Data::pbd2::DsFloat* dsfloati) {
  ::spx_protobuf::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dsfloat_;
  }
  if (dsfloati) {
    ::spx_protobuf::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dsfloati = ::spx_protobuf::protobuf::internal::GetOwnedMessage(
          message_arena, dsfloati, submessage_arena);
    }
    set_has_dsfloat();
  } else {
    clear_has_dsfloat();
  }
  dsfloat_ = dsfloati;
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DataStorage.DsFloat)
}

// -------------------------------------------------------------------

// DsDouble

// repeated double Data = 1;
inline int DsDouble::data_size() const {
  return data_.size();
}
inline void DsDouble::clear_data() {
  data_.Clear();
}
inline double DsDouble::data(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble.Data)
  return data_.Get(index);
}
inline void DsDouble::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble.Data)
}
inline void DsDouble::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DsDouble.Data)
}
inline const ::spx_protobuf::protobuf::RepeatedField< double >&
DsDouble::data() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DsDouble.Data)
  return data_;
}
inline ::spx_protobuf::protobuf::RepeatedField< double >*
DsDouble::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DsDouble.Data)
  return &data_;
}

// -------------------------------------------------------------------

// DsDouble16

// optional bytes Bytes = 1;
inline bool DsDouble16::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DsDouble16::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DsDouble16::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DsDouble16::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes();
}
inline const ::std::string& DsDouble16::bytes() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble16.Bytes)
  return bytes_.GetNoArena();
}
inline void DsDouble16::set_bytes(const ::std::string& value) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble16.Bytes)
}
#if LANG_CXX11
inline void DsDouble16::set_bytes(::std::string&& value) {
  set_has_bytes();
  bytes_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DsDouble16.Bytes)
}
#endif
inline void DsDouble16::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DsDouble16.Bytes)
}
inline void DsDouble16::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DsDouble16.Bytes)
}
inline ::std::string* DsDouble16::mutable_bytes() {
  set_has_bytes();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DsDouble16.Bytes)
  return bytes_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DsDouble16::release_bytes() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DsDouble16.Bytes)
  clear_has_bytes();
  return bytes_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DsDouble16::set_allocated_bytes(::std::string* bytesi) {
  if (bytesi != NULL) {
    set_has_bytes();
  } else {
    clear_has_bytes();
  }
  bytes_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), bytesi);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DsDouble16.Bytes)
}

// optional double Max = 2 [default = 0];
inline bool DsDouble16::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DsDouble16::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DsDouble16::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DsDouble16::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double DsDouble16::max() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble16.Max)
  return max_;
}
inline void DsDouble16::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble16.Max)
}

// optional double Min = 3 [default = 0];
inline bool DsDouble16::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DsDouble16::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DsDouble16::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DsDouble16::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double DsDouble16::cp_min() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble16.Min)
  return min_;
}
inline void DsDouble16::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble16.Min)
}

// -------------------------------------------------------------------

// DsDouble32

// optional bytes Bytes = 1;
inline bool DsDouble32::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DsDouble32::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DsDouble32::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DsDouble32::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes();
}
inline const ::std::string& DsDouble32::bytes() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble32.Bytes)
  return bytes_.GetNoArena();
}
inline void DsDouble32::set_bytes(const ::std::string& value) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble32.Bytes)
}
#if LANG_CXX11
inline void DsDouble32::set_bytes(::std::string&& value) {
  set_has_bytes();
  bytes_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DsDouble32.Bytes)
}
#endif
inline void DsDouble32::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DsDouble32.Bytes)
}
inline void DsDouble32::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DsDouble32.Bytes)
}
inline ::std::string* DsDouble32::mutable_bytes() {
  set_has_bytes();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DsDouble32.Bytes)
  return bytes_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DsDouble32::release_bytes() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DsDouble32.Bytes)
  clear_has_bytes();
  return bytes_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DsDouble32::set_allocated_bytes(::std::string* bytesi) {
  if (bytesi != NULL) {
    set_has_bytes();
  } else {
    clear_has_bytes();
  }
  bytes_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), bytesi);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DsDouble32.Bytes)
}

// optional double Max = 2 [default = 0];
inline bool DsDouble32::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DsDouble32::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DsDouble32::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DsDouble32::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double DsDouble32::max() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble32.Max)
  return max_;
}
inline void DsDouble32::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble32.Max)
}

// optional double Min = 3 [default = 0];
inline bool DsDouble32::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DsDouble32::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DsDouble32::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DsDouble32::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double DsDouble32::cp_min() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble32.Min)
  return min_;
}
inline void DsDouble32::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble32.Min)
}

// -------------------------------------------------------------------

// DsDouble8

// optional bytes Bytes = 1;
inline bool DsDouble8::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DsDouble8::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DsDouble8::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DsDouble8::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes();
}
inline const ::std::string& DsDouble8::bytes() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble8.Bytes)
  return bytes_.GetNoArena();
}
inline void DsDouble8::set_bytes(const ::std::string& value) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble8.Bytes)
}
#if LANG_CXX11
inline void DsDouble8::set_bytes(::std::string&& value) {
  set_has_bytes();
  bytes_.SetNoArena(
    &::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CRFS.Data.pbd2.DsDouble8.Bytes)
}
#endif
inline void DsDouble8::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CRFS.Data.pbd2.DsDouble8.Bytes)
}
inline void DsDouble8::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  bytes_.SetNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CRFS.Data.pbd2.DsDouble8.Bytes)
}
inline ::std::string* DsDouble8::mutable_bytes() {
  set_has_bytes();
  // @@protoc_insertion_point(field_mutable:CRFS.Data.pbd2.DsDouble8.Bytes)
  return bytes_.MutableNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DsDouble8::release_bytes() {
  // @@protoc_insertion_point(field_release:CRFS.Data.pbd2.DsDouble8.Bytes)
  clear_has_bytes();
  return bytes_.ReleaseNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DsDouble8::set_allocated_bytes(::std::string* bytesi) {
  if (bytesi != NULL) {
    set_has_bytes();
  } else {
    clear_has_bytes();
  }
  bytes_.SetAllocatedNoArena(&::spx_protobuf::protobuf::internal::GetEmptyStringAlreadyInited(), bytesi);
  // @@protoc_insertion_point(field_set_allocated:CRFS.Data.pbd2.DsDouble8.Bytes)
}

// optional double Max = 2 [default = 0];
inline bool DsDouble8::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DsDouble8::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DsDouble8::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DsDouble8::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double DsDouble8::max() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble8.Max)
  return max_;
}
inline void DsDouble8::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble8.Max)
}

// optional double Min = 3 [default = 0];
inline bool DsDouble8::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DsDouble8::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DsDouble8::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DsDouble8::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double DsDouble8::cp_min() const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsDouble8.Min)
  return min_;
}
inline void DsDouble8::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsDouble8.Min)
}

// -------------------------------------------------------------------

// DsFloat

// repeated float Values = 1;
inline int DsFloat::values_size() const {
  return values_.size();
}
inline void DsFloat::clear_values() {
  values_.Clear();
}
inline float DsFloat::values(int index) const {
  // @@protoc_insertion_point(field_get:CRFS.Data.pbd2.DsFloat.Values)
  return values_.Get(index);
}
inline void DsFloat::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CRFS.Data.pbd2.DsFloat.Values)
}
inline void DsFloat::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:CRFS.Data.pbd2.DsFloat.Values)
}
inline const ::spx_protobuf::protobuf::RepeatedField< float >&
DsFloat::values() const {
  // @@protoc_insertion_point(field_list:CRFS.Data.pbd2.DsFloat.Values)
  return values_;
}
inline ::spx_protobuf::protobuf::RepeatedField< float >*
DsFloat::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CRFS.Data.pbd2.DsFloat.Values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbd2
}  // namespace Data
}  // namespace CRFS

namespace spx_protobuf {
namespace protobuf {

template <> struct is_proto_enum< ::CRFS::Data::pbd2::ElementTraceType> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::ElementTraceType>() {
  return ::CRFS::Data::pbd2::ElementTraceType_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::NumericDataType> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::NumericDataType>() {
  return ::CRFS::Data::pbd2::NumericDataType_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::StandardKeys> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::StandardKeys>() {
  return ::CRFS::Data::pbd2::StandardKeys_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::TextFunction> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::TextFunction>() {
  return ::CRFS::Data::pbd2::TextFunction_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::DataVolatility> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::DataVolatility>() {
  return ::CRFS::Data::pbd2::DataVolatility_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::DataElementType> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::DataElementType>() {
  return ::CRFS::Data::pbd2::DataElementType_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::DataStorageFormats> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::DataStorageFormats>() {
  return ::CRFS::Data::pbd2::DataStorageFormats_descriptor();
}
template <> struct is_proto_enum< ::CRFS::Data::pbd2::ByteDataContentType> : public ::spx_protobuf::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRFS::Data::pbd2::ByteDataContentType>() {
  return ::CRFS::Data::pbd2::ByteDataContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crfs_2eproto__INCLUDED
